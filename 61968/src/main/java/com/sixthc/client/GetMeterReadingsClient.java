
package com.sixthc.client;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.log4j.Logger;

import ch.iec.tc57._2011.meterreadings.FaultMessage;
import ch.iec.tc57._2011.meterreadings.GetMeterReadings;
import ch.iec.tc57._2011.meterreadings.GetMeterReadingsPort;
import ch.iec.tc57._2011.meterreadingsmessage.MeterReadingsPayloadType;
import ch.iec.tc57._2011.meterreadingsmessage.MeterReadingsRequestMessageType;
import ch.iec.tc57._2011.meterreadingsmessage.MeterReadingsResponseMessageType;
import ch.iec.tc57._2011.schema.message.HeaderType;

/**
 * This class was generated by Apache CXF 2.4.1
 * 2011-08-19T18:52:53.214-04:00
 * Generated source version: 2.4.1
 * 
 */
public final class GetMeterReadingsClient extends RequestClient {
	private static org.apache.log4j.Logger log = Logger
	.getLogger(GetMeterReadingsClient.class);
    private static final QName SERVICE_NAME = new QName("http://www.multispeak.org/Version_3.0", "LM_Server");

    URL wsdlURL = GetMeterReadingsClient.class
	.getResource("/resources/wsdl/LM_Server.wsdl");
    
	private HeaderType header;
	private MeterReadingsPayloadType payload;
	
    private GetMeterReadingsClient() {
    }
    
    public GetMeterReadingsClient(HeaderType header, MeterReadingsPayloadType payload) {
    	this.header = header;
    	this.payload = payload;
    }

    public MeterReadingsResponseMessageType get() throws FaultMessage {
    	String address = header.getReplyAddress();
		if( address == null || address.length() < 1 ) {
			throw new FaultMessage("replyAddress not set");
		}
		log.info("Reply(EndDeviceControls) client");

		log.debug("wsdlURL " + wsdlURL);
		log.debug("SERVICE_NAME " + SERVICE_NAME);
		
		GetMeterReadings ss = new GetMeterReadings(wsdlURL, SERVICE_NAME);
		GetMeterReadingsPort port = ss.getGetMeterReadingsPort();
		BindingProvider provider = (BindingProvider) port;
		log.debug("end point address " + address);
		provider.getRequestContext().put(
				BindingProvider.ENDPOINT_ADDRESS_PROPERTY, address);
		MeterReadingsRequestMessageType msg = new MeterReadingsRequestMessageType();
		msg.setHeader(header);
		msg.setPayload(payload);

		// Register all the logging interceptors
		Client cxfClient = ClientProxy.getClient(port);

		cxfClient.getInInterceptors().add(loggingInInterceptor);
		cxfClient.getInFaultInterceptors().add(loggingInFaultInterceptor);
		cxfClient.getOutInterceptors().add(loggingOutInterceptor);
		cxfClient.getOutFaultInterceptors().add(loggingOutFaultInterceptor);

		// execute client request
		MeterReadingsResponseMessageType reply = port.getMeterReadings(msg);
		return reply;
    }
    
    
    public static void main(String args[]) throws java.lang.Exception {
        URL wsdlURL = GetMeterReadings.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        GetMeterReadings ss = new GetMeterReadings(wsdlURL, SERVICE_NAME);
        GetMeterReadingsPort port = ss.getGetMeterReadingsPort();  
        
        {
        System.out.println("Invoking getMeterReadings...");
        ch.iec.tc57._2011.meterreadingsmessage.MeterReadingsRequestMessageType _getMeterReadings_getMeterReadingsRequestMessage = null;
        try {
            ch.iec.tc57._2011.meterreadingsmessage.MeterReadingsResponseMessageType _getMeterReadings__return = port.getMeterReadings(_getMeterReadings_getMeterReadingsRequestMessage);
            System.out.println("getMeterReadings.result=" + _getMeterReadings__return);

        } catch (FaultMessage e) { 
            System.out.println("Expected exception: FaultMessage has occurred.");
            System.out.println(e.toString());
        }
            }

        System.exit(0);
    }

	public HeaderType getHeader() {
		return header;
	}

	public void setHeader(HeaderType header) {
		this.header = header;
	}

	public MeterReadingsPayloadType getPayload() {
		return payload;
	}

	public void setPayload(MeterReadingsPayloadType payload) {
		this.payload = payload;
	}

}
