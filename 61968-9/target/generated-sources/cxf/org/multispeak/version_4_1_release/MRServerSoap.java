package org.multispeak.version_4_1_release;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;

/**
 * This class was generated by Apache CXF 2.4.1
 * 2014-11-06T16:00:51.186-05:00
 * Generated source version: 2.4.1
 * 
 */
@WebService(targetNamespace = "http://www.multispeak.org/Version_4.1_Release", name = "MR_ServerSoap")
@XmlSeeAlso({org.multispeak.version_4.ObjectFactory.class, _1_release.cpsm_v4.ObjectFactory.class, _1_release.gml_v4.ObjectFactory.class, org.w3._1999.xlink.ObjectFactory.class})
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
public interface MRServerSoap {

    /**
     * Publisher notifies
     * 				MR of a change in the customer object by sending the changed
     * 				customer object.MR returns information about failed transactions
     * 				using an array of errorObjects. The message header attribute
     * 				'registrationID' should be added to all publish messages to indicate
     * 				to the subscriber under which registrationID they received this
     * 				notification data.
     */
    @WebResult(name = "CustomerChangedNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "CustomerChangedNotification", action = "http://www.multispeak.org/Version_4.1_Release/CustomerChangedNotification")
    public org.multispeak.version_4.CustomerChangedNotificationResponse customerChangedNotification(
        @WebParam(partName = "parameters", name = "CustomerChangedNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.CustomerChangedNotification parameters
    );

    /**
     * CB requests a new
     * 				meter reading from MR, on meters selected by meterID. MR returns
     * 				information about failed transactions using an array of
     * 				errorObjects. The meter reading is returned to the CB in the form of
     * 				a meterReading, anintervalData block, or a formattedBlock, sent to
     * 				the URL specified in the responseURL. The transactionID calling
     * 				parameter links this Initiate request with the published data method
     * 				call.The expiration time parameter indicates the amount of time for
     * 				which the publisher should try to obtain and publish the data; if
     * 				the publisher has been unsuccessful in publishing the data after the
     * 				expiration time, then the publisher will discard the request and the
     * 				requestor should not expect a response.
     */
    @WebResult(name = "InitiateMeterReadingsByMeterIDResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InitiateMeterReadingsByMeterID", action = "http://www.multispeak.org/Version_4.1_Release/InitiateMeterReadingsByMeterID")
    public org.multispeak.version_4.InitiateMeterReadingsByMeterIDResponse initiateMeterReadingsByMeterID(
        @WebParam(partName = "parameters", name = "InitiateMeterReadingsByMeterID", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InitiateMeterReadingsByMeterID parameters
    );

    /**
     * Publisher requests
     * 				MR to remove meter(s) from an existing group of meters to address as
     * 				a meter group. MR returns information about failed transaction using
     * 				an array of errorObjects.
     */
    @WebResult(name = "RemoveMetersFromMeterGroupResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "RemoveMetersFromMeterGroup", action = "http://www.multispeak.org/Version_4.1_Release/RemoveMetersFromMeterGroup")
    public org.multispeak.version_4.RemoveMetersFromMeterGroupResponse removeMetersFromMeterGroup(
        @WebParam(partName = "parameters", name = "RemoveMetersFromMeterGroup", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.RemoveMetersFromMeterGroup parameters
    );

    /**
     * Returns the most
     * 				recent reading data for a given meterID and reading type. Reading
     * 				types may be specified using the fieldName parameter. Valid values
     * 				for fieldName are those that are specified in the most current
     * 				formattedBlock Implementation Guidelines Document, as issued by the
     * 				MultiSpeak Initiative. The requestor may specify a preferred format
     * 				for the returned formattedBlock using the formattedBlockTemplateName
     * 				parameter. If the publisher supports this template, the data should
     * 				be returned in that format; if not the publisher should still return
     * 				the data, but in its preferred formattedBlockTemplate format.
     * 			
     */
    @WebResult(name = "GetLatestReadingByMeterIDAndFieldNameResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLatestReadingByMeterIDAndFieldName", action = "http://www.multispeak.org/Version_4.1_Release/GetLatestReadingByMeterIDAndFieldName")
    public org.multispeak.version_4.GetLatestReadingByMeterIDAndFieldNameResponse getLatestReadingByMeterIDAndFieldName(
        @WebParam(partName = "parameters", name = "GetLatestReadingByMeterIDAndFieldName", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLatestReadingByMeterIDAndFieldName parameters
    );

    /**
     * Requester requests
     * 				list of methods to which this server can publish information.
     * 			
     */
    @WebResult(name = "GetPublishMethodsResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetPublishMethods", action = "http://www.multispeak.org/Version_4.1_Release/GetPublishMethods")
    public org.multispeak.version_4.GetPublishMethodsResponse getPublishMethods(
        @WebParam(partName = "parameters", name = "GetPublishMethods", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetPublishMethods parameters
    );

    /**
     * The CB server
     * 				publishes closed service orders to the subscriber. Subscriber
     * 				returns information about failed transactions in an array of
     * 				errorObjects. The message header attribute 'registrationID' should
     * 				be added to all publish messages to indicate to the subscriber under
     * 				which registrationID they received this notification data.
     * 			
     */
    @WebResult(name = "ServiceOrderClosedNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "ServiceOrderClosedNotification", action = "http://www.multispeak.org/Version_4.1_Release/ServiceOrderClosedNotification")
    public org.multispeak.version_4.ServiceOrderClosedNotificationResponse serviceOrderClosedNotification(
        @WebParam(partName = "parameters", name = "ServiceOrderClosedNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.ServiceOrderClosedNotification parameters
    );

    /**
     * Returns all reading
     * 				types supported by the AMR system. Reading types may be specified
     * 				using the fieldName parameter. Valid values for fieldName are those
     * 				that are specified in the most current formattedBlock Implementation
     * 				Guidelines Document, as issued by the MultiSpeak Initiative.
     * 			
     */
    @WebResult(name = "GetSupportedFieldNamesResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetSupportedFieldNames", action = "http://www.multispeak.org/Version_4.1_Release/GetSupportedFieldNames")
    public org.multispeak.version_4.GetSupportedFieldNamesResponse getSupportedFieldNames(
        @WebParam(partName = "parameters", name = "GetSupportedFieldNames", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetSupportedFieldNames parameters
    );

    /**
     * Notify MR of
     * 				cancellation Of zero usage monitoring.(ie move Ins). MR returns
     * 				information about failed transactions using an array of
     * 				errorObjects. 
     */
    @WebResult(name = "CancelUsageMonitoringResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "CancelUsageMonitoring", action = "http://www.multispeak.org/Version_4.1_Release/CancelUsageMonitoring")
    public org.multispeak.version_4.CancelUsageMonitoringResponse cancelUsageMonitoring(
        @WebParam(partName = "parameters", name = "CancelUsageMonitoring", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.CancelUsageMonitoring parameters
    );

    /**
     * CB requests MR to
     * 				schedule meter readings for a group of meters. MR returns
     * 				information about failed transactions using an array of
     * 				errorObjects. MR returns meter readings when they have been
     * 				collected using either the IntervalDataNotification or the
     * 				FormattedBlockNotification methods sent to the URL specified in the
     * 				responseURL parameter.The transactionID calling parameter links this
     * 				Initiate request with the published data method call.
     * 			
     */
    @WebResult(name = "ScheduleGroupMeterReadingResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "ScheduleGroupMeterReading", action = "http://www.multispeak.org/Version_4.1_Release/ScheduleGroupMeterReading")
    public org.multispeak.version_4.ScheduleGroupMeterReadingResponse scheduleGroupMeterReading(
        @WebParam(partName = "parameters", name = "ScheduleGroupMeterReading", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.ScheduleGroupMeterReading parameters
    );

    /**
     * Returns most recent
     * 				meter reading data for all meters in a given meterGroup, requested
     * 				by meter group name. Meter readings are returned in the form of a
     * 				formattedBlock.Reading types may be specified using the fieldName
     * 				parameter. Valid values for fieldName are those that are specified
     * 				in the most current formattedBlock Implementation Guidelines
     * 				Document, as issued by the MultiSpeak Initiative. The requestor may
     * 				specify a preferred format for the returned formattedBlock using the
     * 				formattedBlockTemplateName parameter. If the publisher supports this
     * 				template, the data should be returned in that format; if not the
     * 				publisher should still return the data, but in its preferred
     * 				formattedBlockTemplate format. 
     */
    @WebResult(name = "GetLatestMeterReadingsByMeterGroupResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLatestMeterReadingsByMeterGroup", action = "http://www.multispeak.org/Version_4.1_Release/GetLatestMeterReadingsByMeterGroup")
    public org.multispeak.version_4.GetLatestMeterReadingsByMeterGroupResponse getLatestMeterReadingsByMeterGroup(
        @WebParam(partName = "parameters", name = "GetLatestMeterReadingsByMeterGroup", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLatestMeterReadingsByMeterGroup parameters
    );

    /**
     * Publisher notifies
     * 				MR that the associated meter(s)have been retired from the system. MR
     * 				returns information about failed transactions using an array of
     * 				errorObjects. The message header attribute 'registrationID' should
     * 				be added to all publish messages to indicate to the subscriber under
     * 				which registrationID they received this notification data.
     * 			
     */
    @WebResult(name = "MeterRetireNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "MeterRetireNotification", action = "http://www.multispeak.org/Version_4.1_Release/MeterRetireNotification")
    public org.multispeak.version_4.MeterRetireNotificationResponse meterRetireNotification(
        @WebParam(partName = "parameters", name = "MeterRetireNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.MeterRetireNotification parameters
    );

    /**
     * Requester deletes a
     * 				previously established schedule on the server, specified by sending
     * 				the scheduleID. The server returns information about failed
     * 				transactions using an array of errorObjects. 
     */
    @WebResult(name = "DeleteScheduleResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "DeleteSchedule", action = "http://www.multispeak.org/Version_4.1_Release/DeleteSchedule")
    public org.multispeak.version_4.DeleteScheduleResponse deleteSchedule(
        @WebParam(partName = "parameters", name = "DeleteSchedule", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.DeleteSchedule parameters
    );

    /**
     * This method permits
     * 				a client to have changed information on domain members published to
     * 				it using a previously arranged subscription, set up using the
     * 				RegisterForServiceMethod. The client should first obtain a
     * 				registrationID and then register for service, including the
     * 				DomainMembersChangedNotification as one of the methods in the list
     * 				of methods to which the client has subscribed. The server shall
     * 				include the registrationID for the subscription in the message
     * 				header so that the client can determine the source of the
     * 				domainMember information. 
     */
    @WebResult(name = "DomainMembersChangedNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "DomainMembersChangedNotification", action = "http://www.multispeak.org/Version_4.1_Release/DomainMembersChangedNotification")
    public org.multispeak.version_4.DomainMembersChangedNotificationResponse domainMembersChangedNotification(
        @WebParam(partName = "parameters", name = "DomainMembersChangedNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.DomainMembersChangedNotification parameters
    );

    /**
     * Requester disables
     * 				a previously established readingSchedule on the server, specified by
     * 				sending the readingScheduleID. This action instructs the server to
     * 				stop taking readings based on this readingSchedule. The server
     * 				returns information about failed transactions using an array of
     * 				errorObjects. 
     */
    @WebResult(name = "DisableReadingScheduleResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "DisableReadingSchedule", action = "http://www.multispeak.org/Version_4.1_Release/DisableReadingSchedule")
    public org.multispeak.version_4.DisableReadingScheduleResponse disableReadingSchedule(
        @WebParam(partName = "parameters", name = "DisableReadingSchedule", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.DisableReadingSchedule parameters
    );

    /**
     * Request server to
     * 				perform a meter reading for specific meterIDs and reading type.
     * 				Reading types may be specified using the fieldName parameter. Valid
     * 				values for fieldName are those that are specified in the most
     * 				current formattedBlock Implementation Guidelines Document, as issued
     * 				by the MultiSpeak Initiative. Server returns information about
     * 				failed transactions using an array of errorObjects. The Server
     * 				subsequently returns the data collected by publishing
     * 				formattedBlocks or intervalData blocks to the requestor at the URL
     * 				specified in the responseURL parameter.The transactionID parameter
     * 				is supplied to link the returned formattedBlock(s) with this
     * 				Initiate request. The expiration time parameter indicates the amount
     * 				of time for which the publisher should try to obtain and publish the
     * 				data; if the publisher has been unsuccessful in publishing the data
     * 				after the expiration time then the publisher will discard the
     * 				request and the requestor should not expect a response.
     * 			
     */
    @WebResult(name = "InitiateMeterReadingByMeterIDAndFieldNameResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InitiateMeterReadingByMeterIDAndFieldName", action = "http://www.multispeak.org/Version_4.1_Release/InitiateMeterReadingByMeterIDAndFieldName")
    public org.multispeak.version_4.InitiateMeterReadingByMeterIDAndFieldNameResponse initiateMeterReadingByMeterIDAndFieldName(
        @WebParam(partName = "parameters", name = "InitiateMeterReadingByMeterIDAndFieldName", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InitiateMeterReadingByMeterIDAndFieldName parameters
    );

    /**
     * Requester requests
     * 				a list of methods supported by MR.
     */
    @WebResult(name = "GetMethodsResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetMethods", action = "http://www.multispeak.org/Version_4.1_Release/GetMethods")
    public org.multispeak.version_4.GetMethodsResponse getMethods(
        @WebParam(partName = "parameters", name = "GetMethods", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetMethods parameters
    );

    /**
     * Returns the list of
     * 				readingDataStatusCodes that are supported by the server.
     * 			
     */
    @WebResult(name = "GetSupportedReadingStatusCodesResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetSupportedReadingStatusCodes", action = "http://www.multispeak.org/Version_4.1_Release/GetSupportedReadingStatusCodes")
    public org.multispeak.version_4.GetSupportedReadingStatusCodesResponse getSupportedReadingStatusCodes(
        @WebParam(partName = "parameters", name = "GetSupportedReadingStatusCodes", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetSupportedReadingStatusCodes parameters
    );

    /**
     * Requester initiates
     * 				a demand reset on one or more meters specified by meter identifer.
     * 				MR returns information about failed transactions using an array of
     * 				errorObjects. The MR server confirms the action has been taken by
     * 				publishing a MeterEventNotification to the Requester sent to the URL
     * 				specified in the responseURL. The transactionID calling parameter
     * 				links this Initiate request with the MeterEventNotification method
     * 				call. The expiration time parameter indicates the amount of time for
     * 				which the publisher should try to obtain and publish the data; if
     * 				the publisher has been unsuccessful in publishing the data after the
     * 				expiration time, then the publisher will discard the request and the
     * 				requestor should not expect a response.
     */
    @WebResult(name = "InitiateDemandResetResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InitiateDemandReset", action = "http://www.multispeak.org/Version_4.1_Release/InitiateDemandReset")
    public org.multispeak.version_4.InitiateDemandResetResponse initiateDemandReset(
        @WebParam(partName = "parameters", name = "InitiateDemandReset", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InitiateDemandReset parameters
    );

    /**
     * Requester deletes a
     * 				previously established readingSchedule on the server, specified by
     * 				sending the readingSscheduleID. The server returns information about
     * 				failed transactions using an array of errorObjects.
     * 			
     */
    @WebResult(name = "DeleteReadingScheduleResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "DeleteReadingSchedule", action = "http://www.multispeak.org/Version_4.1_Release/DeleteReadingSchedule")
    public org.multispeak.version_4.DeleteReadingScheduleResponse deleteReadingSchedule(
        @WebParam(partName = "parameters", name = "DeleteReadingSchedule", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.DeleteReadingSchedule parameters
    );

    /**
     * The CB server
     * 				publishes new service orders to the subscriber. Subscriber returns
     * 				information about failed transactions in an array of errorObjects.
     * 				The message header attribute 'registrationID' should be added to all
     * 				publish messages to indicate to the subscriber under which
     * 				registrationID they received this notification data.
     * 			
     */
    @WebResult(name = "ServiceOrderOpenedNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "ServiceOrderOpenedNotification", action = "http://www.multispeak.org/Version_4.1_Release/ServiceOrderOpenedNotification")
    public org.multispeak.version_4.ServiceOrderOpenedNotificationResponse serviceOrderOpenedNotification(
        @WebParam(partName = "parameters", name = "ServiceOrderOpenedNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.ServiceOrderOpenedNotification parameters
    );

    /**
     * Returns history log
     * 				data for a given meterID and date range.
     */
    @WebResult(name = "GetHistoryLogByMeterIDResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetHistoryLogByMeterID", action = "http://www.multispeak.org/Version_4.1_Release/GetHistoryLogByMeterID")
    public org.multispeak.version_4.GetHistoryLogByMeterIDResponse getHistoryLogByMeterID(
        @WebParam(partName = "parameters", name = "GetHistoryLogByMeterID", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetHistoryLogByMeterID parameters
    );

    /**
     * Returns readings
     * 				for a given meter for a specific date range and reading type
     * 				desired. Reading types may be specified using the fieldName
     * 				parameter. Valid values for fieldName are those that are specified
     * 				in the most current formattedBlock Implementation Guidelines
     * 				Document, as issued by the MultiSpeak Initiative. The requestor may
     * 				specify a preferred format for the returned formattedBlock using the
     * 				formattedBlockTemplateName parameter. If the publisher supports this
     * 				template, the data should be returned in that format; if not the
     * 				publisher should still return the data, but in its preferred
     * 				formattedBlockTemplate format. The calling parameter lastReceived is
     * 				included so that large sets of data can be returned in manageable
     * 				blocks. lastReceived should carry an empty string the first time in
     * 				a session that this method is invoked. When multiple calls to this
     * 				method are required to obtain all of the data, the lastReceived
     * 				should carry in subsequent calls the objectID of the data instance
     * 				noted by the server as being the lastSent.
     */
    @WebResult(name = "GetReadingsByMeterIDAndFieldNameResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetReadingsByMeterIDAndFieldName", action = "http://www.multispeak.org/Version_4.1_Release/GetReadingsByMeterIDAndFieldName")
    public org.multispeak.version_4.GetReadingsByMeterIDAndFieldNameResponse getReadingsByMeterIDAndFieldName(
        @WebParam(partName = "parameters", name = "GetReadingsByMeterIDAndFieldName", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetReadingsByMeterIDAndFieldName parameters
    );

    /**
     * Returns load
     * 				Profile reading data for all billing cycles given a billing date.
     * 				Reading(s) are returned in the form of an array of intervalData
     * 				blocks. The calling parameters include: (i) profile date and (ii)
     * 				lastReceived is included so that large sets of data can be returned
     * 				in manageable blocks. lastReceived should carry an empty string the
     * 				first time in a session that this method is invoked. When multiple
     * 				calls to this method are required to obtain all of the data, the
     * 				lastReceived should carry the objectID of the last data instance
     * 				received (that is to say the lastSent data instance) in subsequent
     * 				calls.
     */
    @WebResult(name = "GetLPReadingsByDateIntervalDataResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLPReadingsByDateIntervalData", action = "http://www.multispeak.org/Version_4.1_Release/GetLPReadingsByDateIntervalData")
    public org.multispeak.version_4.GetLPReadingsByDateIntervalDataResponse getLPReadingsByDateIntervalData(
        @WebParam(partName = "parameters", name = "GetLPReadingsByDateIntervalData", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLPReadingsByDateIntervalData parameters
    );

    /**
     * Returns readings
     * 				all meters given the date range and reading types desired. Reading
     * 				types may be specified using the fieldName parameter. Valid values
     * 				for fieldName are those that are specified in the most current
     * 				formattedBlock Implementation Guidelines Document, as issued by the
     * 				MultiSpeak Initiative. The calling parameter lastReceived is
     * 				included so that large sets of data can be returned in manageable
     * 				blocks. lastReceived should carry an empty string the first time in
     * 				a session that this method is invoked. When multiple calls to this
     * 				method are required to obtain all of the data, the lastReceived
     * 				should carry in subsequent calls the objectID of the data instance
     * 				noted by the server as being the lastSent.
     */
    @WebResult(name = "GetReadingsByDateAndFieldNameIntervalDataResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetReadingsByDateAndFieldNameIntervalData", action = "http://www.multispeak.org/Version_4.1_Release/GetReadingsByDateAndFieldNameIntervalData")
    public org.multispeak.version_4.GetReadingsByDateAndFieldNameIntervalDataResponse getReadingsByDateAndFieldNameIntervalData(
        @WebParam(partName = "parameters", name = "GetReadingsByDateAndFieldNameIntervalData", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetReadingsByDateAndFieldNameIntervalData parameters
    );

    /**
     * CB requests MR to
     * 				schedule a meter reading on a group of meters, referred to by meter
     * 				reading group name. MR returns an array of errorObjects to signal
     * 				failed transaction(s). Meter readings are subsequently published to
     * 				the CB using either the IntervalDatNotification or the
     * 				FormattedBlockNotification methods and sent to the URL specified in
     * 				the responseURL parameter.The transactionID calling parameter links
     * 				this Initiate request with the published data method call.The
     * 				expiration time parameter indicates the amount of time for which the
     * 				publisher should try to obtain and publish the data; if the
     * 				publisher has been unsuccessful in publishing the data after the
     * 				expiration time, then the publisher will discard the request and the
     * 				requestor should not expect a response.
     */
    @WebResult(name = "InitiateGroupMeterReadingResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InitiateGroupMeterReading", action = "http://www.multispeak.org/Version_4.1_Release/InitiateGroupMeterReading")
    public org.multispeak.version_4.InitiateGroupMeterReadingResponse initiateGroupMeterReading(
        @WebParam(partName = "parameters", name = "InitiateGroupMeterReading", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InitiateGroupMeterReading parameters
    );

    /**
     * Notify MR of
     * 				cancellation of planned outage given a list of meterIDs. MR returns
     * 				information about failed transactions using an array of
     * 				errorObjects. 
     */
    @WebResult(name = "CancelPlannedOutageResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "CancelPlannedOutage", action = "http://www.multispeak.org/Version_4.1_Release/CancelPlannedOutage")
    public org.multispeak.version_4.CancelPlannedOutageResponse cancelPlannedOutage(
        @WebParam(partName = "parameters", name = "CancelPlannedOutage", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.CancelPlannedOutage parameters
    );

    /**
     * Publisher notifies
     * 				subscriber to remove the associated meterBase(4s). Subscriber
     * 				returns information about failed transactions using an array of
     * 				errorObjects. The message header attribute 'registrationID' should
     * 				be added to all publish messages to indicate to the subscriber under
     * 				which registrationID they received this notification data.
     * 			
     */
    @WebResult(name = "MeterBaseRemoveNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "MeterBaseRemoveNotification", action = "http://www.multispeak.org/Version_4.1_Release/MeterBaseRemoveNotification")
    public org.multispeak.version_4.MeterBaseRemoveNotificationResponse meterBaseRemoveNotification(
        @WebParam(partName = "parameters", name = "MeterBaseRemoveNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.MeterBaseRemoveNotification parameters
    );

    /**
     * Publisher requests
     * 				MR to add meter(s) to an existing group of meters to address as a
     * 				meter group. MR returns information about failed transaction using
     * 				an array of errorObjects.
     */
    @WebResult(name = "InsertMeterInMeterGroupResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InsertMeterInMeterGroup", action = "http://www.multispeak.org/Version_4.1_Release/InsertMeterInMeterGroup")
    public org.multispeak.version_4.InsertMeterInMeterGroupResponse insertMeterInMeterGroup(
        @WebParam(partName = "parameters", name = "InsertMeterInMeterGroup", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InsertMeterInMeterGroup parameters
    );

    /**
     * Returns reading
     * 				data for all meters given a date range. The calling parameter
     * 				lastReceived is included so that large sets of data can be returned
     * 				in manageable blocks. lastReceived should carry an empty string the
     * 				first time in a session that this method is invoked. When multiple
     * 				calls to this method are required to obtain all of the data, the
     * 				lastReceived should carry in subsequent calls the objectID of the
     * 				data instance noted by the server as being the lastSent.
     * 			
     */
    @WebResult(name = "GetReadingsByDateResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetReadingsByDate", action = "http://www.multispeak.org/Version_4.1_Release/GetReadingsByDate")
    public org.multispeak.version_4.GetReadingsByDateResponse getReadingsByDate(
        @WebParam(partName = "parameters", name = "GetReadingsByDate", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetReadingsByDate parameters
    );

    /**
     * Returns all meters
     * 				that have AMR. The calling parameter lastReceived is included so
     * 				that large sets of data can be returned in manageable blocks.
     * 				lastReceived should carry an empty string the first time in a
     * 				session that this method is invoked. When multiple calls to this
     * 				method are required to obtain all of the data, the lastReceived
     * 				should carry in subsequent calls the objectID of the data instance
     * 				noted by the server as being the lastSent.
     */
    @WebResult(name = "GetAMRSupportedMetersResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetAMRSupportedMeters", action = "http://www.multispeak.org/Version_4.1_Release/GetAMRSupportedMeters")
    public org.multispeak.version_4.GetAMRSupportedMetersResponse getAMRSupportedMeters(
        @WebParam(partName = "parameters", name = "GetAMRSupportedMeters", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetAMRSupportedMeters parameters
    );

    /**
     * Notify MR of
     * 				planned outage meters given a List of meterIDs and start and end
     * 				dates of the outage. MR returns information about failed
     * 				transactions using an array of errorObjects. 
     */
    @WebResult(name = "InitiatePlannedOutageResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InitiatePlannedOutage", action = "http://www.multispeak.org/Version_4.1_Release/InitiatePlannedOutage")
    public org.multispeak.version_4.InitiatePlannedOutageResponse initiatePlannedOutage(
        @WebParam(partName = "parameters", name = "InitiatePlannedOutage", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InitiatePlannedOutage parameters
    );

    /**
     * Returns reading
     * 				data for a given meter and billing date. Reading(s)are returned in
     * 				the form of an array of intervalData blocks. Reading types may be
     * 				specified using the fieldName parameter. Valid values for fieldName
     * 				are those that are specified in the most current formattedBlock
     * 				Implementation Guidelines Document, as issued by the MultiSpeak
     * 				Initiative. The calling parameters include: (i) meterID - the meter
     * 				identifier for which readings are to be returned, (ii)billing date -
     * 				the end date of the billing cycle, (iii) kWhLookBack - the number of
     * 				days before the billing date for which the CB will accept valid kWh
     * 				readings (if zero then the reading is only acceptable on the billing
     * 				date), (iv) kWLookBack- the number of days before the billing date
     * 				for which the CB will accept valid kW readings (if zero then the
     * 				reading is only acceptable on the billing date), (v) kWLookForward -
     * 				the number of days to accept demand readings beyond the billing date
     * 				to be used in this billing period (if zero then must use demand
     * 				occurring only through the billing date) (vi) lastReceived is
     * 				included so that large sets of data can be returned in manageable
     * 				blocks. lastReceived should carry an empty string the first time in
     * 				a session that this method is invoked. When multiple calls to this
     * 				method are required to obtain all of the data, the lastReceived
     * 				should carry the objectID of the last data instance received (that
     * 				is to say the lastSent data instance) in subsequent calls.
     * 			
     */
    @WebResult(name = "GetReadingByMeterIDIntervalDataResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetReadingByMeterIDIntervalData", action = "http://www.multispeak.org/Version_4.1_Release/GetReadingByMeterIDIntervalData")
    public org.multispeak.version_4.GetReadingByMeterIDIntervalDataResponse getReadingByMeterIDIntervalData(
        @WebParam(partName = "parameters", name = "GetReadingByMeterIDIntervalData", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetReadingByMeterIDIntervalData parameters
    );

    /**
     * Publisher requests
     * 				MR to eliminate a previously defined group of meters to address as a
     * 				meter group. MR returns information about failed transactions using
     * 				an errorObject.
     */
    @WebResult(name = "DeleteMeterGroupResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "DeleteMeterGroup", action = "http://www.multispeak.org/Version_4.1_Release/DeleteMeterGroup")
    public org.multispeak.version_4.DeleteMeterGroupResponse deleteMeterGroup(
        @WebParam(partName = "parameters", name = "DeleteMeterGroup", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.DeleteMeterGroup parameters
    );

    /**
     * Returns the most
     * 				recent reading data for a given meterID and an array of reading
     * 				types. Reading types may be specified using the fieldName parameter.
     * 				Valid values for fieldName are those that are specified in the most
     * 				current formattedBlock Implementation Guidelines Document, as issued
     * 				by the MultiSpeak Initiative. 
     */
    @WebResult(name = "GetLatestReadingByMeterIDAndFieldNameIntervalDataResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLatestReadingByMeterIDAndFieldNameIntervalData", action = "http://www.multispeak.org/Version_4.1_Release/GetLatestReadingByMeterIDAndFieldNameIntervalData")
    public org.multispeak.version_4.GetLatestReadingByMeterIDAndFieldNameIntervalDataResponse getLatestReadingByMeterIDAndFieldNameIntervalData(
        @WebParam(partName = "parameters", name = "GetLatestReadingByMeterIDAndFieldNameIntervalData", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLatestReadingByMeterIDAndFieldNameIntervalData parameters
    );

    /**
     * Publisher requests
     * 				MR to establish a new group of meters to address as a meter group.
     * 				MR returns information about failed transactions using an array of
     * 				errorObjects. 
     */
    @WebResult(name = "EstablishMeterGroupResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "EstablishMeterGroup", action = "http://www.multispeak.org/Version_4.1_Release/EstablishMeterGroup")
    public org.multispeak.version_4.EstablishMeterGroupResponse establishMeterGroup(
        @WebParam(partName = "parameters", name = "EstablishMeterGroup", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.EstablishMeterGroup parameters
    );

    /**
     * Publisher notifies
     * 				MR to remove the associated meter(s). MR returns information about
     * 				failed transactions using an array of errorObjects. The message
     * 				header attribute 'registrationID' should be added to all publish
     * 				messages to indicate to the subscriber under which registrationID
     * 				they received this notification data.
     */
    @WebResult(name = "MeterRemoveNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "MeterRemoveNotification", action = "http://www.multispeak.org/Version_4.1_Release/MeterRemoveNotification")
    public org.multispeak.version_4.MeterRemoveNotificationResponse meterRemoveNotification(
        @WebParam(partName = "parameters", name = "MeterRemoveNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.MeterRemoveNotification parameters
    );

    /**
     * CB requests a new
     * 				load profile meter reading from MR, on meters selected by meter
     * 				identifier. MR returns information about failed transactions using
     * 				an array of errorObjects. The meter load profile read is returned to
     * 				the CB in the form of either an intervalData block or a
     * 				formattedBlock, sent to the URL specified in the responseURL. The
     * 				transactionID calling parameter links this Initiate request with the
     * 				published data method call.
     */
    @WebResult(name = "InitiateLPMeterReadingsByMeterIDResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InitiateLPMeterReadingsByMeterID", action = "http://www.multispeak.org/Version_4.1_Release/InitiateLPMeterReadingsByMeterID")
    public org.multispeak.version_4.InitiateLPMeterReadingsByMeterIDResponse initiateLPMeterReadingsByMeterID(
        @WebParam(partName = "parameters", name = "InitiateLPMeterReadingsByMeterID", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InitiateLPMeterReadingsByMeterID parameters
    );

    /**
     * Return true if
     * 				given meterID has AMR. Otherwise return false.
     */
    @WebResult(name = "IsAMRMeterResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "IsAMRMeter", action = "http://www.multispeak.org/Version_4.1_Release/IsAMRMeter")
    public org.multispeak.version_4.IsAMRMeterResponse isAMRMeter(
        @WebParam(partName = "parameters", name = "IsAMRMeter", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.IsAMRMeter parameters
    );

    /**
     * Requester
     * 				establishes a new readingSchedule on the server. The server returns
     * 				information about failed transactions using an array of
     * 				errorObjects. 
     */
    @WebResult(name = "EstablishReadingSchedulesResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "EstablishReadingSchedules", action = "http://www.multispeak.org/Version_4.1_Release/EstablishReadingSchedules")
    public org.multispeak.version_4.EstablishReadingSchedulesResponse establishReadingSchedules(
        @WebParam(partName = "parameters", name = "EstablishReadingSchedules", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.EstablishReadingSchedules parameters
    );

    /**
     * Returns history log
     * 				data for a all meters given a date range. The calling parameter
     * 				lastReceived is included so that large sets of data can be returned
     * 				in manageable blocks. lastReceived should carry an empty string the
     * 				first time in a session that this method is invoked. When multiple
     * 				calls to this method are required to obtain all of the data, the
     * 				lastReceived should carry in subsequent calls the objectID of the
     * 				data instance noted by the server as being the lastSent.
     * 			
     */
    @WebResult(name = "GetHistoryLogsByDateResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetHistoryLogsByDate", action = "http://www.multispeak.org/Version_4.1_Release/GetHistoryLogsByDate")
    public org.multispeak.version_4.GetHistoryLogsByDateResponse getHistoryLogsByDate(
        @WebParam(partName = "parameters", name = "GetHistoryLogsByDate", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetHistoryLogsByDate parameters
    );

    /**
     * Publisher notifies
     * 				subscriber to add the associated meterBase(es). Subscriber returns
     * 				information about failed transactions using an array of
     * 				errorObjects. The message header attribute 'registrationID' should
     * 				be added to all publish messages to indicate to the subscriber under
     * 				which registrationID they received this notification data.
     * 			
     */
    @WebResult(name = "MeterBaseAddNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "MeterBaseAddNotification", action = "http://www.multispeak.org/Version_4.1_Release/MeterBaseAddNotification")
    public org.multispeak.version_4.MeterBaseAddNotificationResponse meterBaseAddNotification(
        @WebParam(partName = "parameters", name = "MeterBaseAddNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.MeterBaseAddNotification parameters
    );

    /**
     * Returns the latest
     * 				readings for a list of meters for a specific date range and specific
     * 				types of meter data, specified by fieldName. Valid values for
     * 				fieldName are those that are specified in the most current
     * 				formattedBlock Implementation Guidelines Document, as issued by the
     * 				MultiSpeak Initiative. The requestor may specify a preferred format
     * 				for the returned formattedBlock using the formattedBlockTemplateName
     * 				parameter. If the publisher supports this template, the data should
     * 				be returned in that format; if not the publisher should still return
     * 				the data, but in its preferred formattedBlockTemplate format. The
     * 				calling parameter lastReceived is included so that large sets of
     * 				data can be returned in manageable blocks. lastReceived should carry
     * 				an empty string the first time in a session that this method is
     * 				invoked. When multiple calls to this method are required to obtain
     * 				all of the data, the lastReceived should carry in subsequent calls
     * 				the objectID of the data instance noted by the server as being the
     * 				lastSent.
     */
    @WebResult(name = "GetLatestReadingsByMeterListFormattedBlockResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLatestReadingsByMeterListFormattedBlock", action = "http://www.multispeak.org/Version_4.1_Release/GetLatestReadingsByMeterListFormattedBlock")
    public org.multispeak.version_4.GetLatestReadingsByMeterListFormattedBlockResponse getLatestReadingsByMeterListFormattedBlock(
        @WebParam(partName = "parameters", name = "GetLatestReadingsByMeterListFormattedBlock", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLatestReadingsByMeterListFormattedBlock parameters
    );

    /**
     * Publisher notifies
     * 				MR that the associated in-home display(s)have been retired from the
     * 				system. MR returns information about failed transactions using an
     * 				array of errorObjects. The message header attribute 'registrationID'
     * 				should be added to all publish messages to indicate to the
     * 				subscriber under which registrationID they received this
     * 				notification data.
     */
    @WebResult(name = "InHomeDisplayRetireNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InHomeDisplayRetireNotification", action = "http://www.multispeak.org/Version_4.1_Release/InHomeDisplayRetireNotification")
    public org.multispeak.version_4.InHomeDisplayRetireNotificationResponse inHomeDisplayRetireNotification(
        @WebParam(partName = "parameters", name = "InHomeDisplayRetireNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InHomeDisplayRetireNotification parameters
    );

    /**
     * Publisher notifies
     * 				MR of a change in the serviceLocation object by sending the changed
     * 				serviceLocation object.MR returns information about failed
     * 				transactions using an array of errorObjects. The message header
     * 				attribute 'registrationID' should be added to all publish messages
     * 				to indicate to the subscriber under which registrationID they
     * 				received this notification data.
     */
    @WebResult(name = "ServiceLocationChangedNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "ServiceLocationChangedNotification", action = "http://www.multispeak.org/Version_4.1_Release/ServiceLocationChangedNotification")
    public org.multispeak.version_4.ServiceLocationChangedNotificationResponse serviceLocationChangedNotification(
        @WebParam(partName = "parameters", name = "ServiceLocationChangedNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.ServiceLocationChangedNotification parameters
    );

    /**
     * Returns all
     * 				readingSchedules that have been established on the server. The
     * 				calling parameter lastReceived is included so that large sets of
     * 				data can be returned in manageable blocks. lastReceived should carry
     * 				an empty string the first time in a session that this method is
     * 				invoked. When multiple calls to this method are required to obtain
     * 				all of the data, the lastReceived should carry in subsequent calls
     * 				the objectID of the data instance noted by the server as being the
     * 				lastSent.
     */
    @WebResult(name = "GetReadingSchedulesResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetReadingSchedules", action = "http://www.multispeak.org/Version_4.1_Release/GetReadingSchedules")
    public org.multispeak.version_4.GetReadingSchedulesResponse getReadingSchedules(
        @WebParam(partName = "parameters", name = "GetReadingSchedules", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetReadingSchedules parameters
    );

    /**
     * Publisher notifies
     * 				subscriber that meterBase(es) have been deployed or exchanged.
     * 				Subscriber returns information about failed transactions in an array
     * 				of errorObjects. The message header attribute 'registrationID'
     * 				should be added to all publish messages to indicate to the
     * 				subscriber under which registrationID they received this
     * 				notification data.
     */
    @WebResult(name = "MeterBaseExchangeNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "MeterBaseExchangeNotification", action = "http://www.multispeak.org/Version_4.1_Release/MeterBaseExchangeNotification")
    public org.multispeak.version_4.MeterBaseExchangeNotificationResponse meterBaseExchangeNotification(
        @WebParam(partName = "parameters", name = "MeterBaseExchangeNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.MeterBaseExchangeNotification parameters
    );

    /**
     * Publisher notifies
     * 				subscriber that the associated meterBase(es)have been retired from
     * 				the system. Subscriber returns information about failed transactions
     * 				using an array of errorObjects. The message header attribute
     * 				'registrationID' should be added to all publish messages to indicate
     * 				to the subscriber under which registrationID they received this
     * 				notification data.
     */
    @WebResult(name = "MeterBaseRetireNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "MeterBaseRetireNotification", action = "http://www.multispeak.org/Version_4.1_Release/MeterBaseRetireNotification")
    public org.multispeak.version_4.MeterBaseRetireNotificationResponse meterBaseRetireNotification(
        @WebParam(partName = "parameters", name = "MeterBaseRetireNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.MeterBaseRetireNotification parameters
    );

    /**
     * Returns the most
     * 				recent meter reading data for all AMR capable meters. The calling
     * 				parameter lastReceived is included so that large sets of data can be
     * 				returned in manageable blocks. lastReceived should carry an empty
     * 				string the first time in a session that this method is invoked. When
     * 				multiple calls to this method are required to obtain all of the
     * 				data, the lastReceived should carry in subsequent calls the objectID
     * 				of the data instance noted by the server as being the lastSent.
     * 			
     */
    @WebResult(name = "GetLatestReadingsResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLatestReadings", action = "http://www.multispeak.org/Version_4.1_Release/GetLatestReadings")
    public org.multispeak.version_4.GetLatestReadingsResponse getLatestReadings(
        @WebParam(partName = "parameters", name = "GetLatestReadings", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLatestReadings parameters
    );

    /**
     * The Requester
     * 				requests from the server a list of names of meter configuration
     * 				groups. The server returns an array of strings including the names
     * 				of the supported configurationGroups. The Requester can then request
     * 				the members of a specific group using the
     * 				GetConfigurationGroupMembers method. 
     */
    @WebResult(name = "GetConfigurationGroupNamesResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetConfigurationGroupNames", action = "http://www.multispeak.org/Version_4.1_Release/GetConfigurationGroupNames")
    public org.multispeak.version_4.GetConfigurationGroupNamesResponse getConfigurationGroupNames(
        @WebParam(partName = "parameters", name = "GetConfigurationGroupNames", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetConfigurationGroupNames parameters
    );

    /**
     * Returns history log
     * 				data for a all meters given the eventCode and a date range. The
     * 				calling parameter lastReceived is included so that large sets of
     * 				data can be returned in manageable blocks. lastReceived should carry
     * 				an empty string the first time in a session that this method is
     * 				invoked. When multiple calls to this method are required to obtain
     * 				all of the data, the lastReceived should carry in subsequent calls
     * 				the objectID of the data instance noted by the server as being the
     * 				lastSent.
     */
    @WebResult(name = "GetHistoryLogsByDateAndEventCodeResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetHistoryLogsByDateAndEventCode", action = "http://www.multispeak.org/Version_4.1_Release/GetHistoryLogsByDateAndEventCode")
    public org.multispeak.version_4.GetHistoryLogsByDateAndEventCodeResponse getHistoryLogsByDateAndEventCode(
        @WebParam(partName = "parameters", name = "GetHistoryLogsByDateAndEventCode", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetHistoryLogsByDateAndEventCode parameters
    );

    /**
     * Publisher notifies
     * 				MR of a change in the meter object by sending the changed meter
     * 				object. MR returns information about failed transactions using an
     * 				array of errorObjects. The message header attribute 'registrationID'
     * 				should be added to all publish messages to indicate to the
     * 				subscriber under which registrationID they received this
     * 				notification data.
     */
    @WebResult(name = "MeterChangedNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "MeterChangedNotification", action = "http://www.multispeak.org/Version_4.1_Release/MeterChangedNotification")
    public org.multispeak.version_4.MeterChangedNotificationResponse meterChangedNotification(
        @WebParam(partName = "parameters", name = "MeterChangedNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.MeterChangedNotification parameters
    );

    /**
     * Returns meter
     * 				reading data for a given MeterID and date range.
     * 			
     */
    @WebResult(name = "GetReadingsByMeterIDResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetReadingsByMeterID", action = "http://www.multispeak.org/Version_4.1_Release/GetReadingsByMeterID")
    public org.multispeak.version_4.GetReadingsByMeterIDResponse getReadingsByMeterID(
        @WebParam(partName = "parameters", name = "GetReadingsByMeterID", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetReadingsByMeterID parameters
    );

    /**
     * Publisher notifies
     * 				MR to Add the associated meter(s).MR returns information about
     * 				failed transactions using an array of errorObjects. The message
     * 				header attribute 'registrationID' should be added to all publish
     * 				messages to indicate to the subscriber under which registrationID
     * 				they received this notification data.
     */
    @WebResult(name = "MeterAddNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "MeterAddNotification", action = "http://www.multispeak.org/Version_4.1_Release/MeterAddNotification")
    public org.multispeak.version_4.MeterAddNotificationResponse meterAddNotification(
        @WebParam(partName = "parameters", name = "MeterAddNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.MeterAddNotification parameters
    );

    /**
     * Publisher notifies
     * 				MR that meter(s) have been deployed or exchanged. MR returns
     * 				information about failed transactions in an array of errorObjects.
     * 				The message header attribute 'registrationID' should be added to all
     * 				publish messages to indicate to the subscriber under which
     * 				registrationID they received this notification data.
     * 			
     */
    @WebResult(name = "MeterExchangeNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "MeterExchangeNotification", action = "http://www.multispeak.org/Version_4.1_Release/MeterExchangeNotification")
    public org.multispeak.version_4.MeterExchangeNotificationResponse meterExchangeNotification(
        @WebParam(partName = "parameters", name = "MeterExchangeNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.MeterExchangeNotification parameters
    );

    /**
     * Returns reading
     * 				data for all billing cycles given a billing date. Reading(s) are
     * 				returned in the form of an array of formattedBlocks. Reading types
     * 				may be specified using the fieldName parameter. Valid values for
     * 				fieldName are those that are specified in the most current
     * 				formattedBlock Implementation Guidelines Document, as issued by the
     * 				MultiSpeak Initiative. The requestor may specify a preferred format
     * 				for the returned formattedBlock using the formattedBlockTemplateName
     * 				parameter. If the publisher supports this template, the data should
     * 				be returned in that format; if not the publisher should still return
     * 				the data, but in its preferred formattedBlockTemplate format. The
     * 				calling parameters include: (i) billing date - the end date of the
     * 				billing cycle, (ii) kWhLookBack - the number of days before the
     * 				billing date for which the CB will accept valid kWh readings (if
     * 				zero then the reading is only acceptable on the billing date), (iii)
     * 				kWLookBack- the number of days before the billing date for which the
     * 				CB will accept valid kW readings (if zero then the reading is only
     * 				acceptable on the billing date), (iv) kWLookForward - the number of
     * 				days to accept demand readings beyond the billing date to be used in
     * 				this billing period (if zero then must use demand occurring only
     * 				through the billing date) and (v) lastReceived is included so that
     * 				large sets of data can be returned in manageable blocks.
     * 				lastReceived should carry an empty string the first time in a
     * 				session that this method is invoked. When multiple calls to this
     * 				method are required to obtain all of the data, the lastReceived
     * 				should carry the objectID of the last data instance received (that
     * 				is to say the lastSent data instance) in subsequent calls.
     * 			
     */
    @WebResult(name = "GetReadingsByDateFormattedBlockResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetReadingsByDateFormattedBlock", action = "http://www.multispeak.org/Version_4.1_Release/GetReadingsByDateFormattedBlock")
    public org.multispeak.version_4.GetReadingsByDateFormattedBlockResponse getReadingsByDateFormattedBlock(
        @WebParam(partName = "parameters", name = "GetReadingsByDateFormattedBlock", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetReadingsByDateFormattedBlock parameters
    );

    /**
     * Publisher notifies
     * 				subscriber of a change in the meterBase object by sending the
     * 				changed meterBase object. Subsriber returns information about failed
     * 				transactions using an array of errorObjects. The message header
     * 				attribute 'registrationID' should be added to all publish messages
     * 				to indicate to the subscriber under which registrationID they
     * 				received this notification data.
     */
    @WebResult(name = "MeterBaseChangedNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "MeterBaseChangedNotification", action = "http://www.multispeak.org/Version_4.1_Release/MeterBaseChangedNotification")
    public org.multispeak.version_4.MeterBaseChangedNotificationResponse meterBaseChangedNotification(
        @WebParam(partName = "parameters", name = "MeterBaseChangedNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.MeterBaseChangedNotification parameters
    );

    /**
     * EDTR Notifies MR of
     * 				a received end device (meter) shipment by sending the changed
     * 				endDeviceShipment object. MR returns information about failed
     * 				transactions in an array of errorObjects.The message header
     * 				attribute 'registrationID' should be added to all publish messages
     * 				to indicate to the subscriber under which registrationID they
     * 				received this notification data. 
     */
    @WebResult(name = "EndDeviceShipmentNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "EndDeviceShipmentNotification", action = "http://www.multispeak.org/Version_4.1_Release/EndDeviceShipmentNotification")
    public org.multispeak.version_4.EndDeviceShipmentNotificationResponse endDeviceShipmentNotification(
        @WebParam(partName = "parameters", name = "EndDeviceShipmentNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.EndDeviceShipmentNotification parameters
    );

    /**
     * Returns history log
     * 				data for a given meterID, eventCode and date range.
     * 			
     */
    @WebResult(name = "GetHistoryLogsByMeterIDAndEventCodeResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetHistoryLogsByMeterIDAndEventCode", action = "http://www.multispeak.org/Version_4.1_Release/GetHistoryLogsByMeterIDAndEventCode")
    public org.multispeak.version_4.GetHistoryLogsByMeterIDAndEventCodeResponse getHistoryLogsByMeterIDAndEventCode(
        @WebParam(partName = "parameters", name = "GetHistoryLogsByMeterIDAndEventCode", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetHistoryLogsByMeterIDAndEventCode parameters
    );

    /**
     * Returns all
     * 				schedules that have been established on the server. The calling
     * 				parameter lastReceived is included so that large sets of data can be
     * 				returned in manageable blocks. lastReceived should carry an empty
     * 				string the first time in a session that this method is invoked. When
     * 				multiple calls to this method are required to obtain all of the
     * 				data, the lastReceived should carry in subsequent calls the objectID
     * 				of the data instance noted by the server as being the lastSent.
     * 			
     */
    @WebResult(name = "GetSchedulesResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetSchedules", action = "http://www.multispeak.org/Version_4.1_Release/GetSchedules")
    public org.multispeak.version_4.GetSchedulesResponse getSchedules(
        @WebParam(partName = "parameters", name = "GetSchedules", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetSchedules parameters
    );

    /**
     * Returns all
     * 				required reading data for a given billingCycle and date range in the
     * 				form of an array of formattedBlocks. Reading types may be specified
     * 				using the fieldName parameter. Valid values for fieldName are those
     * 				that are specified in the most current formattedBlock Implementation
     * 				Guidelines Document, as issued by the MultiSpeak Initiative. The
     * 				requestor may specify a preferred format for the returned
     * 				formattedBlock using the formattedBlockTemplateName parameter. If
     * 				the publisher supports this template, the data should be returned in
     * 				that format; if not the publisher should still return the data, but
     * 				in its preferred formattedBlockTemplate format. The calling
     * 				parameters include: (i) billingCycle - the CB billing cycle for
     * 				which readings are to be returned, (ii)billing date - the end date
     * 				of the billing cycle, (iii) kWhLookBack - the number of days before
     * 				the billing date for which the CB will accept valid kWh readings (if
     * 				zero then the reading is only acceptable on the billing date), (iv)
     * 				kWLookBack- the number of days before the billing date for which the
     * 				CB will accept valid kW readings (if zero then the reading is only
     * 				acceptable on the billing date), (v) kWLookForward - the number of
     * 				days to accept demand readings beyond the billing date to be used in
     * 				this billing period (if zero then must use demand occurring only
     * 				through the billing date) (vi) lastReceived is included so that
     * 				large sets of data can be returned in manageable blocks.
     * 				lastReceived should carry an empty string the first time in a
     * 				session that this method is invoked. When multiple calls to this
     * 				method are required to obtain all of the data, the lastReceived
     * 				should carry the objectID of the last data instance received (that
     * 				is to say the lastSent data instance) in subsequent calls.
     * 			
     */
    @WebResult(name = "GetReadingsByBillingCycleResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetReadingsByBillingCycle", action = "http://www.multispeak.org/Version_4.1_Release/GetReadingsByBillingCycle")
    public org.multispeak.version_4.GetReadingsByBillingCycleResponse getReadingsByBillingCycle(
        @WebParam(partName = "parameters", name = "GetReadingsByBillingCycle", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetReadingsByBillingCycle parameters
    );

    /**
     * Returns the latest
     * 				readings for a list of meters of a specific serviceType for a
     * 				specific date range and specific types of meter data, specified by
     * 				fieldName. Valid values for fieldName are those that are specified
     * 				in the most current formattedBlock Implementation Guidelines
     * 				Document, as issued by the MultiSpeak Initiative. The calling
     * 				parameter lastReceived is included so that large sets of data can be
     * 				returned in manageable blocks. lastReceived should carry an empty
     * 				string the first time in a session that this method is invoked. When
     * 				multiple calls to this method are required to obtain all of the
     * 				data, the lastReceived should carry in subsequent calls the objectID
     * 				of the data instance noted by the server as being the lastSent.
     * 			
     */
    @WebResult(name = "GetLatestReadingsByMeterListIntervalDataResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLatestReadingsByMeterListIntervalData", action = "http://www.multispeak.org/Version_4.1_Release/GetLatestReadingsByMeterListIntervalData")
    public org.multispeak.version_4.GetLatestReadingsByMeterListIntervalDataResponse getLatestReadingsByMeterListIntervalData(
        @WebParam(partName = "parameters", name = "GetLatestReadingsByMeterListIntervalData", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLatestReadingsByMeterListIntervalData parameters
    );

    /**
     * Returns all
     * 				required reading data for a given billingCycle and date range in the
     * 				form of an array of intervalData blocks. Reading types may be
     * 				specified using the fieldName parameter. Valid values for fieldName
     * 				are those that are specified in the most current formattedBlock
     * 				Implementation Guidelines Document, as issued by the MultiSpeak
     * 				Initiative. The calling parameters include: (i) billingCycle - the
     * 				CB billing cycle for which readings are to be returned, (ii)billing
     * 				date - the end date of the billing cycle, (iii) kWhLookBack - the
     * 				number of days before the billing date for which the CB will accept
     * 				valid kWh readings (if zero then the reading is only acceptable on
     * 				the billing date), (iv) kWLookBack- the number of days before the
     * 				billing date for which the CB will accept valid kW readings (if zero
     * 				then the reading is only acceptable on the billing date), (v)
     * 				kWLookForward - the number of days to accept demand readings beyond
     * 				the billing date to be used in this billing period (if zero then
     * 				must use demand occurring only through the billing date) (vi)
     * 				lastReceived is included so that large sets of data can be returned
     * 				in manageable blocks. lastReceived should carry an empty string the
     * 				first time in a session that this method is invoked. When multiple
     * 				calls to this method are required to obtain all of the data, the
     * 				lastReceived should carry the objectID of the last data instance
     * 				received (that is to say the lastSent data instance) in subsequent
     * 				calls.
     */
    @WebResult(name = "GetReadingsByBillingCycleIntervalDataResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetReadingsByBillingCycleIntervalData", action = "http://www.multispeak.org/Version_4.1_Release/GetReadingsByBillingCycleIntervalData")
    public org.multispeak.version_4.GetReadingsByBillingCycleIntervalDataResponse getReadingsByBillingCycleIntervalData(
        @WebParam(partName = "parameters", name = "GetReadingsByBillingCycleIntervalData", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetReadingsByBillingCycleIntervalData parameters
    );

    /**
     * Returns load
     * 				profile data, chosen by meterID.
     */
    @WebResult(name = "GetLPDataByMeterIDResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLPDataByMeterID", action = "http://www.multispeak.org/Version_4.1_Release/GetLPDataByMeterID")
    public org.multispeak.version_4.GetLPDataByMeterIDResponse getLPDataByMeterID(
        @WebParam(partName = "parameters", name = "GetLPDataByMeterID", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLPDataByMeterID parameters
    );

    /**
     * Publisher notifies
     * 				MR to remove the associated in-home displays(s). MR returns
     * 				information about failed transactions using an array of
     * 				errorObjects. The message header attribute 'registrationID' should
     * 				be added to all publish messages to indicate to the subscriber under
     * 				which registrationID they received this notification data.
     * 			
     */
    @WebResult(name = "InHomeDisplayRemoveNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InHomeDisplayRemoveNotification", action = "http://www.multispeak.org/Version_4.1_Release/InHomeDisplayRemoveNotification")
    public org.multispeak.version_4.InHomeDisplayRemoveNotificationResponse inHomeDisplayRemoveNotification(
        @WebParam(partName = "parameters", name = "InHomeDisplayRemoveNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InHomeDisplayRemoveNotification parameters
    );

    /**
     * Returns the most
     * 				recent meter reading data for a given MeterID.
     */
    @WebResult(name = "GetLatestReadingByMeterIDResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLatestReadingByMeterID", action = "http://www.multispeak.org/Version_4.1_Release/GetLatestReadingByMeterID")
    public org.multispeak.version_4.GetLatestReadingByMeterIDResponse getLatestReadingByMeterID(
        @WebParam(partName = "parameters", name = "GetLatestReadingByMeterID", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLatestReadingByMeterID parameters
    );

    /**
     * Publisher notifies
     * 				MR of meters that should be removed from disconnected status.(i.e.
     * 				made active). MR returns information about failed transactions using
     * 				an array of errorObjects. 
     */
    @WebResult(name = "CancelDisconnectedStatusResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "CancelDisconnectedStatus", action = "http://www.multispeak.org/Version_4.1_Release/CancelDisconnectedStatus")
    public org.multispeak.version_4.CancelDisconnectedStatusResponse cancelDisconnectedStatus(
        @WebParam(partName = "parameters", name = "CancelDisconnectedStatus", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.CancelDisconnectedStatus parameters
    );

    /**
     * Returns the
     * 				requested reading data for all meters given unit of measure(UOM) and
     * 				date range. The calling parameter lastReceived is included so that
     * 				large sets of data can be returned in manageable blocks.
     * 				lastReceived should carry an empty string the first time in a
     * 				session that this method is invoked. When multiple calls to this
     * 				method are required to obtain all of the data, the lastReceived
     * 				should carry in subsequent calls the objectID of the data instance
     * 				noted by the server as being the lastSent.
     */
    @WebResult(name = "GetReadingsByUOMAndDateResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetReadingsByUOMAndDate", action = "http://www.multispeak.org/Version_4.1_Release/GetReadingsByUOMAndDate")
    public org.multispeak.version_4.GetReadingsByUOMAndDateResponse getReadingsByUOMAndDate(
        @WebParam(partName = "parameters", name = "GetReadingsByUOMAndDate", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetReadingsByUOMAndDate parameters
    );

    /**
     * CB requests MR to
     * 				to update the in-home display associated with a specific service
     * 				location. MR returns information about failed transactions using an
     * 				array of errorObjects. 
     */
    @WebResult(name = "UpdateServiceLocationDisplaysResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "UpdateServiceLocationDisplays", action = "http://www.multispeak.org/Version_4.1_Release/UpdateServiceLocationDisplays")
    public org.multispeak.version_4.UpdateServiceLocationDisplaysResponse updateServiceLocationDisplays(
        @WebParam(partName = "parameters", name = "UpdateServiceLocationDisplays", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.UpdateServiceLocationDisplays parameters
    );

    /**
     * Returns a schedule
     * 				that previously has been established on the server, selected by the
     * 				scheduleID. 
     */
    @WebResult(name = "GetScheduleByIDResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetScheduleByID", action = "http://www.multispeak.org/Version_4.1_Release/GetScheduleByID")
    public org.multispeak.version_4.GetScheduleByIDResponse getScheduleByID(
        @WebParam(partName = "parameters", name = "GetScheduleByID", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetScheduleByID parameters
    );

    /**
     * Returns the latest
     * 				readings for a list of meters for a specific date range and reading
     * 				types desired. Reading types may be specified using the fieldName
     * 				parameter. Valid values for fieldName are those that are specified
     * 				in the most current formattedBlock Implementation Guidelines
     * 				Document, as issued by the MultiSpeak Initiative. The calling
     * 				parameter lastReceived is included so that large sets of data can be
     * 				returned in manageable blocks. lastReceived should carry an empty
     * 				string the first time in a session that this method is invoked. When
     * 				multiple calls to this method are required to obtain all of the
     * 				data, the lastReceived should carry in subsequent calls the objectID
     * 				of the data instance noted by the server as being the lastSent.
     * 			
     */
    @WebResult(name = "GetLatestReadingsByMeterIDListIntervalDataResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLatestReadingsByMeterIDListIntervalData", action = "http://www.multispeak.org/Version_4.1_Release/GetLatestReadingsByMeterIDListIntervalData")
    public org.multispeak.version_4.GetLatestReadingsByMeterIDListIntervalDataResponse getLatestReadingsByMeterIDListIntervalData(
        @WebParam(partName = "parameters", name = "GetLatestReadingsByMeterIDListIntervalData", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLatestReadingsByMeterIDListIntervalData parameters
    );

    /**
     * Requester
     * 				establishes a new schedule on the server. The server returns
     * 				information about failed transactions using an array of
     * 				errorObjects. 
     */
    @WebResult(name = "EstablishSchedulesResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "EstablishSchedules", action = "http://www.multispeak.org/Version_4.1_Release/EstablishSchedules")
    public org.multispeak.version_4.EstablishSchedulesResponse establishSchedules(
        @WebParam(partName = "parameters", name = "EstablishSchedules", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.EstablishSchedules parameters
    );

    /**
     * EA requests MR to
     * 				to perform a meter reading for all meters down line of the circuit
     * 				element supplied using the calling parameters objectName and
     * 				nounType and containing the phasing supplied in the calling
     * 				parameter phaseCode. The MR subsequently returns the data collected
     * 				by publishing either intervalData or formattedBlocks to the EA at
     * 				the URL specified in the responseURL parameter. The transactionID
     * 				parameter is supplied to link the returned formattedBlock(s) with
     * 				this Initiate request.The expiration time parameter indicates the
     * 				amount of time for which the publisher should try to obtain and
     * 				publish the data; if the publisher has been unsuccessful in
     * 				publishing the data after the expiration time, then the publisher
     * 				will discard the request and the requestor should not expect a
     * 				response. 
     */
    @WebResult(name = "InitiateMeterReadingByObjectResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InitiateMeterReadingByObject", action = "http://www.multispeak.org/Version_4.1_Release/InitiateMeterReadingByObject")
    public org.multispeak.version_4.InitiateMeterReadingByObjectResponse initiateMeterReadingByObject(
        @WebParam(partName = "parameters", name = "InitiateMeterReadingByObject", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InitiateMeterReadingByObject parameters
    );

    /**
     * Publisher notifies
     * 				MR of meters that have been disconnected and no AMR reading is
     * 				expected. MR returns information about failed transactions using an
     * 				array of errorObjects. 
     */
    @WebResult(name = "InitiateDisconnectedStatusResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InitiateDisconnectedStatus", action = "http://www.multispeak.org/Version_4.1_Release/InitiateDisconnectedStatus")
    public org.multispeak.version_4.InitiateDisconnectedStatusResponse initiateDisconnectedStatus(
        @WebParam(partName = "parameters", name = "InitiateDisconnectedStatus", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InitiateDisconnectedStatus parameters
    );

    /**
     * Publisher requests
     * 				MR to remove meter(s) from an existing configuration group. MR
     * 				returns information about failed transaction using an array of
     * 				errorObjects.
     */
    @WebResult(name = "RemoveMetersFromConfigurationGroupResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "RemoveMetersFromConfigurationGroup", action = "http://www.multispeak.org/Version_4.1_Release/RemoveMetersFromConfigurationGroup")
    public org.multispeak.version_4.RemoveMetersFromConfigurationGroupResponse removeMetersFromConfigurationGroup(
        @WebParam(partName = "parameters", name = "RemoveMetersFromConfigurationGroup", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.RemoveMetersFromConfigurationGroup parameters
    );

    /**
     * Returns Load
     * 				Profile reading data for all billing cycles given a billing date.
     * 				Reading(s) are returned in the form of an array of formattedBlocks.
     * 				The calling parameters include: (i) profile date and (ii)
     * 				lastReceived is included so that large sets of data can be returned
     * 				in manageable blocks. lastReceived should carry an empty string the
     * 				first time in a session that this method is invoked. When multiple
     * 				calls to this method are required to obtain all of the data, the
     * 				lastReceived should carry the objectID of the last data instance
     * 				received (that is to say the lastSent data instance) in subsequent
     * 				calls.
     */
    @WebResult(name = "GetLPReadingsByDateFormattedBlockResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLPReadingsByDateFormattedBlock", action = "http://www.multispeak.org/Version_4.1_Release/GetLPReadingsByDateFormattedBlock")
    public org.multispeak.version_4.GetLPReadingsByDateFormattedBlockResponse getLPReadingsByDateFormattedBlock(
        @WebParam(partName = "parameters", name = "GetLPReadingsByDateFormattedBlock", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLPReadingsByDateFormattedBlock parameters
    );

    /**
     * Requester enables a
     * 				previously established readingSchedule on the server, specified by
     * 				sending the readingScheduleID. This action instructs the server to
     * 				begin taking readings based on this readingSchedule. The server
     * 				returns information about failed transactions using an array of
     * 				errorObjects. 
     */
    @WebResult(name = "EnableReadingSchedulesResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "EnableReadingSchedules", action = "http://www.multispeak.org/Version_4.1_Release/EnableReadingSchedules")
    public org.multispeak.version_4.EnableReadingSchedulesResponse enableReadingSchedules(
        @WebParam(partName = "parameters", name = "EnableReadingSchedules", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.EnableReadingSchedules parameters
    );

    /**
     * Returns most recent
     * 				meter reading data for all meters in a given meterGroup, requested
     * 				by meter group name. Meter readings are returned in the form of an
     * 				intervalData block. Reading types may be specified using the
     * 				fieldName parameter. Valid values for fieldName are those that are
     * 				specified in the most current formattedBlock Implementation
     * 				Guidelines Document, as issued by the MultiSpeak Initiative.
     * 			
     */
    @WebResult(name = "GetLatestMeterReadingsByMeterGroupIntervalDataResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLatestMeterReadingsByMeterGroupIntervalData", action = "http://www.multispeak.org/Version_4.1_Release/GetLatestMeterReadingsByMeterGroupIntervalData")
    public org.multispeak.version_4.GetLatestMeterReadingsByMeterGroupIntervalDataResponse getLatestMeterReadingsByMeterGroupIntervalData(
        @WebParam(partName = "parameters", name = "GetLatestMeterReadingsByMeterGroupIntervalData", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLatestMeterReadingsByMeterGroupIntervalData parameters
    );

    /**
     * Publisher notifies
     * 				MR of a change in customer account(s) by sending the changed account
     * 				object(s).MR returns information about failed transactions using an
     * 				array of errorObjects. The message header attribute 'registrationID'
     * 				should be added to all publish messages to indicate to the
     * 				subscriber under which registrationID they received this
     * 				notification data.
     */
    @WebResult(name = "AccountChangedNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "AccountChangedNotification", action = "http://www.multispeak.org/Version_4.1_Release/AccountChangedNotification")
    public org.multispeak.version_4.AccountChangedNotificationResponse accountChangedNotification(
        @WebParam(partName = "parameters", name = "AccountChangedNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.AccountChangedNotification parameters
    );

    /**
     * Returns the most
     * 				recent reading data for given reading types. Reading types may be
     * 				specified using the fieldName parameter. Valid values for fieldName
     * 				are those that are specified in the most current formattedBlock
     * 				Implementation Guidelines Document, as issued by the MultiSpeak
     * 				Initiative. The calling parameter lastReceived is included so that
     * 				large sets of data can be returned in manageable blocks.
     * 				lastReceived should carry an empty string the first time in a
     * 				session that this method is invoked. When multiple calls to this
     * 				method are required to obtain all of the data, the lastReceived
     * 				should carry in subsequent calls the objectID of the data instance
     * 				noted by the server as being the lastSent.
     */
    @WebResult(name = "GetLatestReadingByFieldNameIntervalDataResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLatestReadingByFieldNameIntervalData", action = "http://www.multispeak.org/Version_4.1_Release/GetLatestReadingByFieldNameIntervalData")
    public org.multispeak.version_4.GetLatestReadingByFieldNameIntervalDataResponse getLatestReadingByFieldNameIntervalData(
        @WebParam(partName = "parameters", name = "GetLatestReadingByFieldNameIntervalData", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLatestReadingByFieldNameIntervalData parameters
    );

    /**
     * Returns load
     * 				Profile reading data for a given meter and date range. Reading(s)are
     * 				returned in the form of an array of intervalData blocks. The calling
     * 				parameters include: (i) meterID - the meter identifier for which
     * 				readings are to be returned, (ii)profile starting date, (iii)
     * 				profile ending date (iv) lastReceived is included so that large sets
     * 				of data can be returned in manageable blocks. lastReceived should
     * 				carry an empty string the first time in a session that this method
     * 				is invoked. When multiple calls to this method are required to
     * 				obtain all of the data, the lastReceived should carry the objectID
     * 				of the last data instance received (that is to say the lastSent data
     * 				instance) in subsequent calls.
     */
    @WebResult(name = "GetLPReadingsByMeterIDIntervalDataResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLPReadingsByMeterIDIntervalData", action = "http://www.multispeak.org/Version_4.1_Release/GetLPReadingsByMeterIDIntervalData")
    public org.multispeak.version_4.GetLPReadingsByMeterIDIntervalDataResponse getLPReadingsByMeterIDIntervalData(
        @WebParam(partName = "parameters", name = "GetLPReadingsByMeterIDIntervalData", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLPReadingsByMeterIDIntervalData parameters
    );

    /**
     * Returns a
     * 				readingSchedule that previously has been established on the server,
     * 				selected by the scheduleID. 
     */
    @WebResult(name = "GetReadingScheduleByIDResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetReadingScheduleByID", action = "http://www.multispeak.org/Version_4.1_Release/GetReadingScheduleByID")
    public org.multispeak.version_4.GetReadingScheduleByIDResponse getReadingScheduleByID(
        @WebParam(partName = "parameters", name = "GetReadingScheduleByID", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetReadingScheduleByID parameters
    );

    /**
     * This method permits
     * 				a client to have changed information on domain names published to it
     * 				using a previously arranged subscription, set up using the
     * 				RegisterForServiceMethod. The client should first obtain a
     * 				registrationID and then register for service, including the
     * 				DomainNamesChangedNotification as one of the methods in the list of
     * 				methods to which the client has subscribed. The server shall include
     * 				the registrationID for the subscription in the message header so
     * 				that the client can determine the source of the domainName
     * 				information. 
     */
    @WebResult(name = "DomainNamesChangedNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "DomainNamesChangedNotification", action = "http://www.multispeak.org/Version_4.1_Release/DomainNamesChangedNotification")
    public org.multispeak.version_4.DomainNamesChangedNotificationResponse domainNamesChangedNotification(
        @WebParam(partName = "parameters", name = "DomainNamesChangedNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.DomainNamesChangedNotification parameters
    );

    /**
     * Publisher notifies
     * 				MR to add the associated in-home display(s).MR returns information
     * 				about failed transactions using an array of errorObjects. The
     * 				message header attribute 'registrationID' should be added to all
     * 				publish messages to indicate to the subscriber under which
     * 				registrationID they received this notification data.
     * 			
     */
    @WebResult(name = "InHomeDisplayAddNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InHomeDisplayAddNotification", action = "http://www.multispeak.org/Version_4.1_Release/InHomeDisplayAddNotification")
    public org.multispeak.version_4.InHomeDisplayAddNotificationResponse inHomeDisplayAddNotification(
        @WebParam(partName = "parameters", name = "InHomeDisplayAddNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InHomeDisplayAddNotification parameters
    );

    /**
     * Returns readings
     * 				all meters given the date range and reading type desired. Reading
     * 				types may be specified using the fieldName parameter. Valid values
     * 				for fieldName are those that are specified in the most current
     * 				formattedBlock Implementation Guidelines Document, as issued by the
     * 				MultiSpeak Initiative. The requestor may specify a preferred format
     * 				for the returned formattedBlock using the formattedBlockTemplateName
     * 				parameter. If the publisher supports this template, the data should
     * 				be returned in that format; if not the publisher should still return
     * 				the data, but in its preferred formattedBlockTemplate format. The
     * 				calling parameter lastReceived is included so that large sets of
     * 				data can be returned in manageable blocks. lastReceived should carry
     * 				an empty string the first time in a session that this method is
     * 				invoked. When multiple calls to this method are required to obtain
     * 				all of the data, the lastReceived should carry in subsequent calls
     * 				the objectID of the data instance noted by the server as being the
     * 				lastSent.
     */
    @WebResult(name = "GetReadingsByDateAndFieldNameResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetReadingsByDateAndFieldName", action = "http://www.multispeak.org/Version_4.1_Release/GetReadingsByDateAndFieldName")
    public org.multispeak.version_4.GetReadingsByDateAndFieldNameResponse getReadingsByDateAndFieldName(
        @WebParam(partName = "parameters", name = "GetReadingsByDateAndFieldName", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetReadingsByDateAndFieldName parameters
    );

    /**
     * Publisher notifies
     * 				MR of new outages by sending the new lists of
     * 				CustomersAffectedByOutage. MR returns status of failed tranactions
     * 				in an array of errorObjects. The message header attribute
     * 				'registrationID' should be added to all publish messages to indicate
     * 				to the subscriber under which registrationID they received this
     * 				notification data.
     */
    @WebResult(name = "CustomersAffectedByOutageNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "CustomersAffectedByOutageNotification", action = "http://www.multispeak.org/Version_4.1_Release/CustomersAffectedByOutageNotification")
    public org.multispeak.version_4.CustomersAffectedByOutageNotificationResponse customersAffectedByOutageNotification(
        @WebParam(partName = "parameters", name = "CustomersAffectedByOutageNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.CustomersAffectedByOutageNotification parameters
    );

    /**
     * Returns Load
     * 				Profile reading data for a given meter and date range. Reading(s)are
     * 				returned in the form of an array of formattedBlocks. The calling
     * 				parameters include: (i) meterID - the meter identifier for which
     * 				readings are to be returned, (ii)profile starting date, (iii)
     * 				profile ending date (iv) lastReceived is included so that large sets
     * 				of data can be returned in manageable blocks. lastReceived should
     * 				carry an empty string the first time in a session that this method
     * 				is invoked. When multiple calls to this method are required to
     * 				obtain all of the data, the lastReceived should carry the objectID
     * 				of the last data instance received (that is to say the lastSent data
     * 				instance) in subsequent calls.
     */
    @WebResult(name = "GetLPReadingsByMeterIDFormattedBlockResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLPReadingsByMeterIDFormattedBlock", action = "http://www.multispeak.org/Version_4.1_Release/GetLPReadingsByMeterIDFormattedBlock")
    public org.multispeak.version_4.GetLPReadingsByMeterIDFormattedBlockResponse getLPReadingsByMeterIDFormattedBlock(
        @WebParam(partName = "parameters", name = "GetLPReadingsByMeterIDFormattedBlock", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLPReadingsByMeterIDFormattedBlock parameters
    );

    /**
     * EDTR Notifies
     * 				subscriber of a completion of tests on electric meters by sending an
     * 				array of testedElectricMeters. Subscriber returns information about
     * 				failed transactions in an array of errorObjects. The message header
     * 				attribute 'registrationID' should be added to all publish messages
     * 				to indicate to the subscriber under which registrationID they
     * 				received this notification data.
     */
    @WebResult(name = "MeterTestNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "MeterTestNotification", action = "http://www.multispeak.org/Version_4.1_Release/MeterTestNotification")
    public org.multispeak.version_4.MeterTestNotificationResponse meterTestNotification(
        @WebParam(partName = "parameters", name = "MeterTestNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.MeterTestNotification parameters
    );

    /**
     * The Requester
     * 				requests from the server a list of names of meter configuration
     * 				groups for a specific meter. The server returns an array of strings
     * 				including the names of the supported configurationGroups. The
     * 				Requester can then request the members of a specific group using the
     * 				GetConfigurationGroupMembers method. 
     */
    @WebResult(name = "GetConfigurationGroupNamesByMeterIDResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetConfigurationGroupNamesByMeterID", action = "http://www.multispeak.org/Version_4.1_Release/GetConfigurationGroupNamesByMeterID")
    public org.multispeak.version_4.GetConfigurationGroupNamesByMeterIDResponse getConfigurationGroupNamesByMeterID(
        @WebParam(partName = "parameters", name = "GetConfigurationGroupNamesByMeterID", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetConfigurationGroupNamesByMeterID parameters
    );

    /**
     * This method deletes
     * 				a previously established subscription (registration for service)
     * 				that carries the registration identifer listed in the input
     * 				parameter registrationID.
     */
    @WebResult(name = "UnregisterForServiceResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "UnregisterForService", action = "http://www.multispeak.org/Version_4.1_Release/UnregisterForService")
    public org.multispeak.version_4.UnregisterForServiceResponse unregisterForService(
        @WebParam(partName = "parameters", name = "UnregisterForService", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.UnregisterForService parameters
    );

    /**
     * Publisher notifies
     * 				MR of a change in the in-home display(s)by sending the changed
     * 				inHomeDisplay object. MR returns information about failed
     * 				transactions using an array of errorObjects. The message header
     * 				attribute 'registrationID' should be added to all publish messages
     * 				to indicate to the subscriber under which registrationID they
     * 				received this notification data.
     */
    @WebResult(name = "InHomeDisplayChangedNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InHomeDisplayChangedNotification", action = "http://www.multispeak.org/Version_4.1_Release/InHomeDisplayChangedNotification")
    public org.multispeak.version_4.InHomeDisplayChangedNotificationResponse inHomeDisplayChangedNotification(
        @WebParam(partName = "parameters", name = "InHomeDisplayChangedNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InHomeDisplayChangedNotification parameters
    );

    /**
     * Returns readings
     * 				for a given meter for a specific date range and reading types
     * 				desired. Reading types may be specified using the fieldName
     * 				parameter. Valid values for fieldName are those that are specified
     * 				in the most current formattedBlock Implementation Guidelines
     * 				Document, as issued by the MultiSpeak Initiative. The calling
     * 				parameter lastReceived is included so that large sets of data can be
     * 				returned in manageable blocks. lastReceived should carry an empty
     * 				string the first time in a session that this method is invoked. When
     * 				multiple calls to this method are required to obtain all of the
     * 				data, the lastReceived should carry in subsequent calls the objectID
     * 				of the data instance noted by the server as being the lastSent.
     * 			
     */
    @WebResult(name = "GetReadingsByMeterIDAndFieldNameIntervalDataResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetReadingsByMeterIDAndFieldNameIntervalData", action = "http://www.multispeak.org/Version_4.1_Release/GetReadingsByMeterIDAndFieldNameIntervalData")
    public org.multispeak.version_4.GetReadingsByMeterIDAndFieldNameIntervalDataResponse getReadingsByMeterIDAndFieldNameIntervalData(
        @WebParam(partName = "parameters", name = "GetReadingsByMeterIDAndFieldNameIntervalData", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetReadingsByMeterIDAndFieldNameIntervalData parameters
    );

    /**
     * The client requests
     * 				from the server a list of names of domains supported by the server.
     * 				This method is used, along with the GetDomainMembers method to
     * 				enable systems to exchange information about application-specific or
     * 				installation-specific lists of information, such as the lists of
     * 				counties for this installation or the list of serviceStatusCodes
     * 				used by the server. It is recommended that domain names be returned
     * 				in the form of the name of a named object (noun) in the MultiSpeak
     * 				schema dotted with the field name of interest. For instance, if the
     * 				system of record is returning workflow status codes that would be
     * 				used on work orders, it is suggested that the domain name be called
     * 				“workOrder.workflowStatus”, using the same spelling and
     * 				capitalization used in the MultiSpeak schema.
     */
    @WebResult(name = "GetDomainNamesResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetDomainNames", action = "http://www.multispeak.org/Version_4.1_Release/GetDomainNames")
    public org.multispeak.version_4.GetDomainNamesResponse getDomainNames(
        @WebParam(partName = "parameters", name = "GetDomainNames", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetDomainNames parameters
    );

    /**
     * Returns load
     * 				Profile reading data for a given BillingCycle and Date in the form
     * 				of an array of intervalData blocks. The calling parameters include:
     * 				(i) billingCycle - the CB billing cycle for which readings are to be
     * 				returned, (ii)billing date - the end date of the billing cycle,
     * 				(iii) lastReceived is included so that large sets of data can be
     * 				returned in manageable blocks. lastReceived should carry an empty
     * 				string the first time in a session that this method is invoked. When
     * 				multiple calls to this method are required to obtain all of the
     * 				data, the lastReceived should carry the objectID of the last data
     * 				instance received (that is to say the lastSent data instance) in
     * 				subsequent calls.
     */
    @WebResult(name = "GetLPReadingsByBillingCycleIntervalDataResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLPReadingsByBillingCycleIntervalData", action = "http://www.multispeak.org/Version_4.1_Release/GetLPReadingsByBillingCycleIntervalData")
    public org.multispeak.version_4.GetLPReadingsByBillingCycleIntervalDataResponse getLPReadingsByBillingCycleIntervalData(
        @WebParam(partName = "parameters", name = "GetLPReadingsByBillingCycleIntervalData", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLPReadingsByBillingCycleIntervalData parameters
    );

    /**
     * Returns the most
     * 				recent reading data for a given reading type. Reading types may be
     * 				specified using the fieldName parameter. Valid values for fieldName
     * 				are those that are specified in the most current formattedBlock
     * 				Implementation Guidelines Document, as issued by the MultiSpeak
     * 				Initiative. The requestor may specify a preferred format for the
     * 				returned formattedBlock using the formattedBlockTemplateName
     * 				parameter. If the publisher supports this template, the data should
     * 				be returned in that format; if not the publisher should still return
     * 				the data, but in its preferred formattedBlockTemplate format. The
     * 				calling parameter lastReceived is included so that large sets of
     * 				data can be returned in manageable blocks. lastReceived should carry
     * 				an empty string the first time in a session that this method is
     * 				invoked. When multiple calls to this method are required to obtain
     * 				all of the data, the lastReceived should carry in subsequent calls
     * 				the objectID of the data instance noted by the server as being the
     * 				lastSent.
     */
    @WebResult(name = "GetLatestReadingByFieldNameResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLatestReadingByFieldName", action = "http://www.multispeak.org/Version_4.1_Release/GetLatestReadingByFieldName")
    public org.multispeak.version_4.GetLatestReadingByFieldNameResponse getLatestReadingByFieldName(
        @WebParam(partName = "parameters", name = "GetLatestReadingByFieldName", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLatestReadingByFieldName parameters
    );

    /**
     * Returns all meters
     * 				that support AMR and that have been modified since the specified
     * 				sessionID. The calling parameter previousSessionID should carry the
     * 				session identifier for the last session of data that the client has
     * 				successfully received. The calling parameter lastReceived is
     * 				included so that large sets of data can be returned in manageable
     * 				blocks. lastReceived should carry an empty string the first time in
     * 				a session that this method is invoked. When multiple calls to this
     * 				method are required to obtain all of the data, the lastReceived
     * 				should carry in subsequent calls the objectID of the data instance
     * 				noted by the server as being the lastSent.
     */
    @WebResult(name = "GetModifiedAMRMetersResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetModifiedAMRMeters", action = "http://www.multispeak.org/Version_4.1_Release/GetModifiedAMRMeters")
    public org.multispeak.version_4.GetModifiedAMRMetersResponse getModifiedAMRMeters(
        @WebParam(partName = "parameters", name = "GetModifiedAMRMeters", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetModifiedAMRMeters parameters
    );

    /**
     * The Requester
     * 				notifies the MR of meters where zero usage is expected (i.e. move
     * 				outs). The MR should return notifications of usage in excess of the
     * 				pre-determined allowable amount to the Requester using the
     * 				UsageMonitoringNotification method on the sending system. The
     * 				responseURL parameter is included in this InitiateUsageMonitoring
     * 				call so that the MR knows where it should publish
     * 				UsageMonitoringNotifications. The MR returns information about
     * 				failed transactions, if any, to the Requester using an array of
     * 				errorObjects.
     */
    @WebResult(name = "InitiateUsageMonitoringResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InitiateUsageMonitoring", action = "http://www.multispeak.org/Version_4.1_Release/InitiateUsageMonitoring")
    public org.multispeak.version_4.InitiateUsageMonitoringResponse initiateUsageMonitoring(
        @WebParam(partName = "parameters", name = "InitiateUsageMonitoring", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InitiateUsageMonitoring parameters
    );

    /**
     * This method
     * 				requests the return of existing registration information (that is to
     * 				say the details of what is subscribed on this subscription) for a
     * 				specific registrationID. The server should return a SOAPFault if the
     * 				registrationID is not valid.
     */
    @WebResult(name = "GetRegistrationInfoByIDResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetRegistrationInfoByID", action = "http://www.multispeak.org/Version_4.1_Release/GetRegistrationInfoByID")
    public org.multispeak.version_4.GetRegistrationInfoByIDResponse getRegistrationInfoByID(
        @WebParam(partName = "parameters", name = "GetRegistrationInfoByID", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetRegistrationInfoByID parameters
    );

    /**
     * The Requester
     * 				requests from the server the members of a specific meter
     * 				cofiguration group, identified by the meterGroupName parameter. This
     * 				method is used, along with the GetConfigurationGroupNames method to
     * 				enable the Requester to get information about which meters are
     * 				included in a specific meter configuration group. The server returns
     * 				a meterGroups object in response to this method call. This object
     * 				can carry meterGroups that only include meters of one service type
     * 				or a mixed meterGroup that contains meters of mixed service type.
     * 			
     */
    @WebResult(name = "GetConfigurationGroupMembersResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetConfigurationGroupMembers", action = "http://www.multispeak.org/Version_4.1_Release/GetConfigurationGroupMembers")
    public org.multispeak.version_4.GetConfigurationGroupMembersResponse getConfigurationGroupMembers(
        @WebParam(partName = "parameters", name = "GetConfigurationGroupMembers", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetConfigurationGroupMembers parameters
    );

    /**
     * Returns the latest
     * 				readings for a list of meters for a specific date range and reading
     * 				type desired. Reading types may be specified using the fieldName
     * 				parameter. Valid values for fieldName are those that are specified
     * 				in the most current formattedBlock Implementation Guidelines
     * 				Document, as issued by the MultiSpeak Initiative. The requestor may
     * 				specify a preferred format for the returned formattedBlock using the
     * 				formattedBlockTemplateName parameter. If the publisher supports this
     * 				template, the data should be returned in that format; if not the
     * 				publisher should still return the data, but in its preferred
     * 				formattedBlockTemplate format. The calling parameter lastReceived is
     * 				included so that large sets of data can be returned in manageable
     * 				blocks. lastReceived should carry an empty string the first time in
     * 				a session that this method is invoked. When multiple calls to this
     * 				method are required to obtain all of the data, the lastReceived
     * 				should carry in subsequent calls the objectID of the data instance
     * 				noted by the server as being the lastSent.
     */
    @WebResult(name = "GetLatestReadingsByMeterIDListResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLatestReadingsByMeterIDList", action = "http://www.multispeak.org/Version_4.1_Release/GetLatestReadingsByMeterIDList")
    public org.multispeak.version_4.GetLatestReadingsByMeterIDListResponse getLatestReadingsByMeterIDList(
        @WebParam(partName = "parameters", name = "GetLatestReadingsByMeterIDList", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLatestReadingsByMeterIDList parameters
    );

    /**
     * Returns reading
     * 				data for a given meter and billing date. Reading(s)are returned in
     * 				the form of an array of formattedBlocks. Reading types may be
     * 				specified using the fieldName parameter. Valid values for fieldName
     * 				are those that are specified in the most current formattedBlock
     * 				Implementation Guidelines Document, as issued by the MultiSpeak
     * 				Initiative. The requestor may specify a preferred format for the
     * 				returned formattedBlock using the formattedBlockTemplateName
     * 				parameter. If the publisher supports this template, the data should
     * 				be returned in that format; if not the publisher should still return
     * 				the data, but in its preferred formattedBlockTemplate format. The
     * 				calling parameters include: (i) meterID - the meter identifier for
     * 				which readings are to be returned, (ii)billing date - the end date
     * 				of the billing cycle, (iii) kWhLookBack - the number of days before
     * 				the billing date for which the CB will accept valid kWh readings (if
     * 				zero then the reading is only acceptable on the billing date), (iv)
     * 				kWLookBack- the number of days before the billing date for which the
     * 				CB will accept valid kW readings (if zero then the reading is only
     * 				acceptable on the billing date), (v) kWLookForward - the number of
     * 				days to accept demand readings beyond the billing date to be used in
     * 				this billing period (if zero then must use demand occurring only
     * 				through the billing date) (vi) lastReceived is included so that
     * 				large sets of data can be returned in manageable blocks.
     * 				lastReceived should carry an empty string the first time in a
     * 				session that this method is invoked. When multiple calls to this
     * 				method are required to obtain all of the data, the lastReceived
     * 				should carry the objectID of the last data instance received (that
     * 				is to say the lastSent data instance) in subsequent calls.
     * 			
     */
    @WebResult(name = "GetReadingByMeterIDFormattedBlockResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetReadingByMeterIDFormattedBlock", action = "http://www.multispeak.org/Version_4.1_Release/GetReadingByMeterIDFormattedBlock")
    public org.multispeak.version_4.GetReadingByMeterIDFormattedBlockResponse getReadingByMeterIDFormattedBlock(
        @WebParam(partName = "parameters", name = "GetReadingByMeterIDFormattedBlock", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetReadingByMeterIDFormattedBlock parameters
    );

    /**
     * Publisher notifies
     * 				MR that in-home displays(s) have been deployed or exchanged. MR
     * 				returns information about failed transactions in an array of
     * 				errorObjects. The message header attribute 'registrationID' should
     * 				be added to all publish messages to indicate to the subscriber under
     * 				which registrationID they received this notification data.
     * 			
     */
    @WebResult(name = "InHomeDisplayExchangeNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InHomeDisplayExchangeNotification", action = "http://www.multispeak.org/Version_4.1_Release/InHomeDisplayExchangeNotification")
    public org.multispeak.version_4.InHomeDisplayExchangeNotificationResponse inHomeDisplayExchangeNotification(
        @WebParam(partName = "parameters", name = "InHomeDisplayExchangeNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InHomeDisplayExchangeNotification parameters
    );

    /**
     * Publisher requests
     * 				MR to add meter(s) to an existing configuration group. MR returns
     * 				information about failed transaction using an array of errorObjects.
     * 			
     */
    @WebResult(name = "InsertMeterInConfigurationGroupResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InsertMeterInConfigurationGroup", action = "http://www.multispeak.org/Version_4.1_Release/InsertMeterInConfigurationGroup")
    public org.multispeak.version_4.InsertMeterInConfigurationGroupResponse insertMeterInConfigurationGroup(
        @WebParam(partName = "parameters", name = "InsertMeterInConfigurationGroup", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InsertMeterInConfigurationGroup parameters
    );

    /**
     * Returns all
     * 				required Load Profile reading data for a given BillingCycle and Date
     * 				in the form of an array of formattedBlocks. The calling parameters
     * 				include: (i) billingCycle - the CB billing cycle for which readings
     * 				are to be returned, (ii)billing date - the end date of the billing
     * 				cycle, (iii) lastReceived is included so that large sets of data can
     * 				be returned in manageable blocks. lastReceived should carry an empty
     * 				string the first time in a session that this method is invoked. When
     * 				multiple calls to this method are required to obtain all of the
     * 				data, the lastReceived should carry the objectID of the last data
     * 				instance received (that is to say the lastSent data instance) in
     * 				subsequent calls.
     */
    @WebResult(name = "GetLPReadingsByBillingCycleResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetLPReadingsByBillingCycle", action = "http://www.multispeak.org/Version_4.1_Release/GetLPReadingsByBillingCycle")
    public org.multispeak.version_4.GetLPReadingsByBillingCycleResponse getLPReadingsByBillingCycle(
        @WebParam(partName = "parameters", name = "GetLPReadingsByBillingCycle", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetLPReadingsByBillingCycle parameters
    );

    /**
     * The client requests
     * 				from the server the members of a specific domain of information,
     * 				identified by the domainName parameter, which are supported by the
     * 				server. This method is used, along with the GetDomainNames method to
     * 				enable systems to exchange information about application-specific or
     * 				installation-specific lists of information, such as the lists of
     * 				counties for this installation or the list of serviceStatusCodes
     * 				used by the server.
     */
    @WebResult(name = "GetDomainMembersResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetDomainMembers", action = "http://www.multispeak.org/Version_4.1_Release/GetDomainMembers")
    public org.multispeak.version_4.GetDomainMembersResponse getDomainMembers(
        @WebParam(partName = "parameters", name = "GetDomainMembers", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetDomainMembers parameters
    );

    /**
     * This method
     * 				establishs a subscription using a previously requested
     * 				registrationID. The calling parameter registrationInfo is a complex
     * 				type that includes the following information: registrationID - the
     * 				previously requested registrationID obtained from the publisher by
     * 				calling RequestRegistrationID, responseURL – the URL to which
     * 				information should subsequently be published on this subscription,
     * 				msFunction – the abbreviated string name of the MultiSpeak method
     * 				making the subscription request (for instance, if an application
     * 				that exposes the Meter Reading function has made the request, then
     * 				the msFunction variable should include “MR”), methodsList – An array
     * 				of strings that contain the string names of the MultiSpeak methods
     * 				to which the subscriber would like to subscribe. Subsequent calls to
     * 				RegisterForService on an existing subscription replace prior
     * 				subscription details in their entirety - they do NOT add to an
     * 				existing subscription.
     */
    @WebResult(name = "RegisterForServiceResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "RegisterForService", action = "http://www.multispeak.org/Version_4.1_Release/RegisterForService")
    public org.multispeak.version_4.RegisterForServiceResponse registerForService(
        @WebParam(partName = "parameters", name = "RegisterForService", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.RegisterForService parameters
    );

    /**
     * This service
     * 				requests of the publisher a unique registration ID that would
     * 				subsequently be used to refer unambiguously to that specific
     * 				subscription. The return parameter is the registrationID, which is a
     * 				string-type value. It is recommended that the server not implement
     * 				registration in such a manner that one client can guess the
     * 				registrationID of another. For instance the use of sequential
     * 				numbers for registrationIDs is discouraged.
     */
    @WebResult(name = "RequestRegistrationIDResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "RequestRegistrationID", action = "http://www.multispeak.org/Version_4.1_Release/RequestRegistrationID")
    public org.multispeak.version_4.RequestRegistrationIDResponse requestRegistrationID(
        @WebParam(partName = "parameters", name = "RequestRegistrationID", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.RequestRegistrationID parameters
    );

    /**
     * Returns reading
     * 				data for all billing cycles given a billing date. Reading(s) are
     * 				returned in the form of an array of intervalData blocks. Reading
     * 				types may be specified using the fieldName parameter. Valid values
     * 				for fieldName are those that are specified in the most current
     * 				formattedBlock Implementation Guidelines Document, as issued by the
     * 				MultiSpeak Initiative. The calling parameters include: (i) billing
     * 				date - the end date of the billing cycle, (ii) kWhLookBack - the
     * 				number of days before the billing date for which the CB will accept
     * 				valid kWh readings (if zero then the reading is only acceptable on
     * 				the billing date), (iii) kWLookBack- the number of days before the
     * 				billing date for which the CB will accept valid kW readings (if zero
     * 				then the reading is only acceptable on the billing date), (iv)
     * 				kWLookForward - the number of days to accept demand readings beyond
     * 				the billing date to be used in this billing period (if zero then
     * 				must use demand occurring only through the billing date) and (v)
     * 				lastReceived is included so that large sets of data can be returned
     * 				in manageable blocks. lastReceived should carry an empty string the
     * 				first time in a session that this method is invoked. When multiple
     * 				calls to this method are required to obtain all of the data, the
     * 				lastReceived should carry the objectID of the last data instance
     * 				received (that is to say the lastSent data instance) in subsequent
     * 				calls.
     */
    @WebResult(name = "GetReadingsByDateIntervalDataResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetReadingsByDateIntervalData", action = "http://www.multispeak.org/Version_4.1_Release/GetReadingsByDateIntervalData")
    public org.multispeak.version_4.GetReadingsByDateIntervalDataResponse getReadingsByDateIntervalData(
        @WebParam(partName = "parameters", name = "GetReadingsByDateIntervalData", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetReadingsByDateIntervalData parameters
    );

    /**
     * The CB server
     * 				publishes changed service orders to the subscriber. Subscriber
     * 				returns information about failed transactions in an array of
     * 				errorObjects. The message header attribute 'registrationID' should
     * 				be added to all publish messages to indicate to the subscriber under
     * 				which registrationID they received this notification data.
     * 			
     */
    @WebResult(name = "ServiceOrderChangedNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "ServiceOrderChangedNotification", action = "http://www.multispeak.org/Version_4.1_Release/ServiceOrderChangedNotification")
    public org.multispeak.version_4.ServiceOrderChangedNotificationResponse serviceOrderChangedNotification(
        @WebParam(partName = "parameters", name = "ServiceOrderChangedNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.ServiceOrderChangedNotification parameters
    );

    /**
     * Publisher notifies
     * 				subscriber of the modified connectivity of meters after a switching
     * 				event used to restore load during outage situations. Subscriber
     * 				returns status of failed tranactions in an array of errorObjects.
     * 				The message header attribute 'registrationID' should be added to all
     * 				publish messages to indicate to the subscriber under which
     * 				registrationID they received this notification data.
     * 			
     */
    @WebResult(name = "MeterConnectivityNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "MeterConnectivityNotification", action = "http://www.multispeak.org/Version_4.1_Release/MeterConnectivityNotification")
    public org.multispeak.version_4.MeterConnectivityNotificationResponse meterConnectivityNotification(
        @WebParam(partName = "parameters", name = "MeterConnectivityNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.MeterConnectivityNotification parameters
    );

    /**
     * Returns the
     * 				templates for formattedBlocks that the server supports. The calling
     * 				parameter lastReceived is included so that large sets of data can be
     * 				returned in manageable blocks. lastReceived should carry an empty
     * 				string the first time in a session that this method is invoked. When
     * 				multiple calls to this method are required to obtain all of the
     * 				data, the lastReceived should carry in subsequent calls the objectID
     * 				of the data instance noted by the server as being the lastSent.
     * 			
     */
    @WebResult(name = "GetFormattedBlockTemplatesResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "GetFormattedBlockTemplates", action = "http://www.multispeak.org/Version_4.1_Release/GetFormattedBlockTemplates")
    public org.multispeak.version_4.GetFormattedBlockTemplatesResponse getFormattedBlockTemplates(
        @WebParam(partName = "parameters", name = "GetFormattedBlockTemplates", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.GetFormattedBlockTemplates parameters
    );

    /**
     * Requester requests
     * 				MR to schedule a meter reading on a group of meters, to obtain
     * 				specific types of meter data, specified by fieldName. Valid values
     * 				for fieldName are those that are specified in the most current
     * 				FormattedBlock Implementation Guidelines Document, as issued by the
     * 				MultiSpeak Initiative. The expiration time parameter indicates the
     * 				amount of time for which the MR should try to obtain and publish the
     * 				data; if the MR has been unsuccessful in publishing the data after
     * 				the expiration time, then the publisher will discard the request and
     * 				the requestor should not expect a response. Meter readings are
     * 				subsequently published to the requestor using one of the following
     * 				asynchronous response types: (i) FormattedBlockNotification, (ii)
     * 				IntervalDataNotification, or (iii)ReadingChangedNotification methods
     * 				and sent to the URL specified in the responseURL parameter. The
     * 				transactionID calling parameter links this Initiate request with the
     * 				published data method call. The requestor may specify a preferred
     * 				format for a returned formattedBlock using the
     * 				formattedBlockTemplateName parameter. If the publisher supports this
     * 				template, the data should be returned in that format; if not the
     * 				publisher should still return the data, but in its preferred
     * 				formattedBlockTemplate format. Error handling may be of six types
     * 				for this method: 1)The publisher cannot read any of the reading
     * 				types requested – Expected response: The publisher should return an
     * 				errorObject in the synchronous response to the Initiate message (a
     * 				synchronous error response). 2) The publisher can read only some of
     * 				the values being requested – Expected Response: The publisher should
     * 				send what it can, without flagging an error condition. 3) The meter
     * 				for which data is being requested does not exist in the publisher’s
     * 				system – Expected Response: A synchronous error (see definition in
     * 				point 1 above) should be returned. 4) The publisher is too busy to
     * 				respond or too much information is being requested - Expected
     * 				Response: A synchronous error (see definition in point 1 above)
     * 				should be returned. 5) The request is delayed beyond the specified
     * 				expiration time – Expected Response: The publisher closes the
     * 				request and does not make an error response. 6) The publisher tried
     * 				and failed to successfully make the readings – Expected Response:
     * 				The publisher should send an asynchronous return message (a
     * 				ReadingChangedNotification, IntervalDataNotification, or
     * 				FormattedBlockNotification) with the errorString attribute of the
     * 				meterReading set. 
     */
    @WebResult(name = "InitiateMeterReadingsByFieldNameResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "InitiateMeterReadingsByFieldName", action = "http://www.multispeak.org/Version_4.1_Release/InitiateMeterReadingsByFieldName")
    public org.multispeak.version_4.InitiateMeterReadingsByFieldNameResponse initiateMeterReadingsByFieldName(
        @WebParam(partName = "parameters", name = "InitiateMeterReadingsByFieldName", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.InitiateMeterReadingsByFieldName parameters
    );

    /**
     * Requester pings URL
     * 				of MR to see if it is alive. Returns errorObject(s) as necessary to
     * 				communicate application status.
     */
    @WebResult(name = "PingURLResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", partName = "parameters")
    @WebMethod(operationName = "PingURL", action = "http://www.multispeak.org/Version_4.1_Release/PingURL")
    public org.multispeak.version_4.PingURLResponse pingURL(
        @WebParam(partName = "parameters", name = "PingURL", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
        org.multispeak.version_4.PingURL parameters
    );
}
