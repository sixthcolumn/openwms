package com.sixthc.client;


/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.log4j.Logger;
import org.multispeak.version_3.ErrorObject;
import org.multispeak.version_3.InitiateRequest;
import org.multispeak.version_3_0.LMServer;
import org.multispeak.version_3_0.LMServerSoap;




/**
 * This class was generated by Apache CXF 2.4.1
 * 2011-08-19T18:52:53.214-04:00
 * Generated source version: 2.4.1
 * 
 */
public final class RequestLMClient extends RequestClient {
	private static org.apache.log4j.Logger log = Logger
	.getLogger(RequestLMClient.class);
    private static final QName SERVICE_NAME = new QName("http://www.multispeak.org/Version_3", "LM_Server");
    URL wsdlURL = RequestLMClient.class
	.getResource("/resources/wsdl/LM_Server.wsdl");
    
    public ErrorObject execute(InitiateRequest request)  {
    	log.info("executing client callback to address : " + request.getReplyAddress());
        LMServer ss = new LMServer(wsdlURL, SERVICE_NAME);
        LMServerSoap port = ss.getLMServerSoap(); 
        
		BindingProvider provider = (BindingProvider) port;
		String address = request.getReplyAddress();
		log.debug("end point address " + request.getReplyAddress());
		if( address == null || address.length() < 1 ) {
			log.info("No reply address provided, aborting...");
			ErrorObject eo = new ErrorObject();
			eo.setErrorString("No reply address, aborting");
			return eo;
		}
		log.info("bind address before" + provider.getRequestContext().get(BindingProvider.ENDPOINT_ADDRESS_PROPERTY));
		provider.getRequestContext().put(
				BindingProvider.ENDPOINT_ADDRESS_PROPERTY, address);
		log.info("bind address after" + provider.getRequestContext().get(BindingProvider.ENDPOINT_ADDRESS_PROPERTY));


		// Register all the logging interceptors
		Client cxfClient = ClientProxy.getClient(port);

		cxfClient.getInInterceptors().add(loggingInInterceptor);
		cxfClient.getInFaultInterceptors().add(loggingInFaultInterceptor);
		cxfClient.getOutInterceptors().add(loggingOutInterceptor);
		cxfClient.getOutFaultInterceptors().add(loggingOutFaultInterceptor);

		//ErrorObject eo =  port.initiateLoadManagementEvent(request.getEvent());
		ErrorObject eo = port.initiateLoadManagementEvent(request.getEvent());
		log.info("error object : " + eo);
		return eo;
    }
}



